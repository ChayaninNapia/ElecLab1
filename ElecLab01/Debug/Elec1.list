
Elec1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b14  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d30  08003d30  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d38  08003d38  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d38  08003d38  00013d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d3c  08003d3c  00013d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08003d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  200000d0  08003e10  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08003e10  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bfaf  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b1d  00000000  00000000  0002c0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000948  00000000  00000000  0002dc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000723  00000000  00000000  0002e558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248c1  00000000  00000000  0002ec7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bceb  00000000  00000000  0005353c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e91f9  00000000  00000000  0005f227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000295c  00000000  00000000  00148420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0014ad7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000d0 	.word	0x200000d0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003cd4 	.word	0x08003cd4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000d4 	.word	0x200000d4
 8000214:	08003cd4 	.word	0x08003cd4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b970 	b.w	8000e38 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	460d      	mov	r5, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	460f      	mov	r7, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14a      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4694      	mov	ip, r2
 8000b84:	d965      	bls.n	8000c52 <__udivmoddi4+0xe2>
 8000b86:	fab2 f382 	clz	r3, r2
 8000b8a:	b143      	cbz	r3, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b90:	f1c3 0220 	rsb	r2, r3, #32
 8000b94:	409f      	lsls	r7, r3
 8000b96:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9a:	4317      	orrs	r7, r2
 8000b9c:	409c      	lsls	r4, r3
 8000b9e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ba2:	fa1f f58c 	uxth.w	r5, ip
 8000ba6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000baa:	0c22      	lsrs	r2, r4, #16
 8000bac:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bb0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bb4:	fb01 f005 	mul.w	r0, r1, r5
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	d90a      	bls.n	8000bd2 <__udivmoddi4+0x62>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bc4:	f080 811c 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f240 8119 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bce:	3902      	subs	r1, #2
 8000bd0:	4462      	add	r2, ip
 8000bd2:	1a12      	subs	r2, r2, r0
 8000bd4:	b2a4      	uxth	r4, r4
 8000bd6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bda:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bde:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be2:	fb00 f505 	mul.w	r5, r0, r5
 8000be6:	42a5      	cmp	r5, r4
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x90>
 8000bea:	eb1c 0404 	adds.w	r4, ip, r4
 8000bee:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf2:	f080 8107 	bcs.w	8000e04 <__udivmoddi4+0x294>
 8000bf6:	42a5      	cmp	r5, r4
 8000bf8:	f240 8104 	bls.w	8000e04 <__udivmoddi4+0x294>
 8000bfc:	4464      	add	r4, ip
 8000bfe:	3802      	subs	r0, #2
 8000c00:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c04:	1b64      	subs	r4, r4, r5
 8000c06:	2100      	movs	r1, #0
 8000c08:	b11e      	cbz	r6, 8000c12 <__udivmoddi4+0xa2>
 8000c0a:	40dc      	lsrs	r4, r3
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0xbc>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80ed 	beq.w	8000dfa <__udivmoddi4+0x28a>
 8000c20:	2100      	movs	r1, #0
 8000c22:	e9c6 0500 	strd	r0, r5, [r6]
 8000c26:	4608      	mov	r0, r1
 8000c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2c:	fab3 f183 	clz	r1, r3
 8000c30:	2900      	cmp	r1, #0
 8000c32:	d149      	bne.n	8000cc8 <__udivmoddi4+0x158>
 8000c34:	42ab      	cmp	r3, r5
 8000c36:	d302      	bcc.n	8000c3e <__udivmoddi4+0xce>
 8000c38:	4282      	cmp	r2, r0
 8000c3a:	f200 80f8 	bhi.w	8000e2e <__udivmoddi4+0x2be>
 8000c3e:	1a84      	subs	r4, r0, r2
 8000c40:	eb65 0203 	sbc.w	r2, r5, r3
 8000c44:	2001      	movs	r0, #1
 8000c46:	4617      	mov	r7, r2
 8000c48:	2e00      	cmp	r6, #0
 8000c4a:	d0e2      	beq.n	8000c12 <__udivmoddi4+0xa2>
 8000c4c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c50:	e7df      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000c52:	b902      	cbnz	r2, 8000c56 <__udivmoddi4+0xe6>
 8000c54:	deff      	udf	#255	; 0xff
 8000c56:	fab2 f382 	clz	r3, r2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 8090 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c60:	1a8a      	subs	r2, r1, r2
 8000c62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c66:	fa1f fe8c 	uxth.w	lr, ip
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c70:	fb07 2015 	mls	r0, r7, r5, r2
 8000c74:	0c22      	lsrs	r2, r4, #16
 8000c76:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c7a:	fb0e f005 	mul.w	r0, lr, r5
 8000c7e:	4290      	cmp	r0, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c82:	eb1c 0202 	adds.w	r2, ip, r2
 8000c86:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4290      	cmp	r0, r2
 8000c8e:	f200 80cb 	bhi.w	8000e28 <__udivmoddi4+0x2b8>
 8000c92:	4645      	mov	r5, r8
 8000c94:	1a12      	subs	r2, r2, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca8:	45a6      	cmp	lr, r4
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x14e>
 8000cac:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb4:	d202      	bcs.n	8000cbc <__udivmoddi4+0x14c>
 8000cb6:	45a6      	cmp	lr, r4
 8000cb8:	f200 80bb 	bhi.w	8000e32 <__udivmoddi4+0x2c2>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc6:	e79f      	b.n	8000c08 <__udivmoddi4+0x98>
 8000cc8:	f1c1 0720 	rsb	r7, r1, #32
 8000ccc:	408b      	lsls	r3, r1
 8000cce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cda:	fa20 f307 	lsr.w	r3, r0, r7
 8000cde:	40fd      	lsrs	r5, r7
 8000ce0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce4:	4323      	orrs	r3, r4
 8000ce6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cea:	fa1f fe8c 	uxth.w	lr, ip
 8000cee:	fb09 5518 	mls	r5, r9, r8, r5
 8000cf2:	0c1c      	lsrs	r4, r3, #16
 8000cf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cf8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cfc:	42a5      	cmp	r5, r4
 8000cfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000d02:	fa00 f001 	lsl.w	r0, r0, r1
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d10:	f080 8088 	bcs.w	8000e24 <__udivmoddi4+0x2b4>
 8000d14:	42a5      	cmp	r5, r4
 8000d16:	f240 8085 	bls.w	8000e24 <__udivmoddi4+0x2b4>
 8000d1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1e:	4464      	add	r4, ip
 8000d20:	1b64      	subs	r4, r4, r5
 8000d22:	b29d      	uxth	r5, r3
 8000d24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d28:	fb09 4413 	mls	r4, r9, r3, r4
 8000d2c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d30:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d34:	45a6      	cmp	lr, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d40:	d26c      	bcs.n	8000e1c <__udivmoddi4+0x2ac>
 8000d42:	45a6      	cmp	lr, r4
 8000d44:	d96a      	bls.n	8000e1c <__udivmoddi4+0x2ac>
 8000d46:	3b02      	subs	r3, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d52:	eba4 040e 	sub.w	r4, r4, lr
 8000d56:	42ac      	cmp	r4, r5
 8000d58:	46c8      	mov	r8, r9
 8000d5a:	46ae      	mov	lr, r5
 8000d5c:	d356      	bcc.n	8000e0c <__udivmoddi4+0x29c>
 8000d5e:	d053      	beq.n	8000e08 <__udivmoddi4+0x298>
 8000d60:	b156      	cbz	r6, 8000d78 <__udivmoddi4+0x208>
 8000d62:	ebb0 0208 	subs.w	r2, r0, r8
 8000d66:	eb64 040e 	sbc.w	r4, r4, lr
 8000d6a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d6e:	40ca      	lsrs	r2, r1
 8000d70:	40cc      	lsrs	r4, r1
 8000d72:	4317      	orrs	r7, r2
 8000d74:	e9c6 7400 	strd	r7, r4, [r6]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d80:	f1c3 0120 	rsb	r1, r3, #32
 8000d84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d88:	fa20 f201 	lsr.w	r2, r0, r1
 8000d8c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d90:	409d      	lsls	r5, r3
 8000d92:	432a      	orrs	r2, r5
 8000d94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da0:	fb07 1510 	mls	r5, r7, r0, r1
 8000da4:	0c11      	lsrs	r1, r2, #16
 8000da6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000daa:	fb00 f50e 	mul.w	r5, r0, lr
 8000dae:	428d      	cmp	r5, r1
 8000db0:	fa04 f403 	lsl.w	r4, r4, r3
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x258>
 8000db6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dbe:	d22f      	bcs.n	8000e20 <__udivmoddi4+0x2b0>
 8000dc0:	428d      	cmp	r5, r1
 8000dc2:	d92d      	bls.n	8000e20 <__udivmoddi4+0x2b0>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	4461      	add	r1, ip
 8000dc8:	1b49      	subs	r1, r1, r5
 8000dca:	b292      	uxth	r2, r2
 8000dcc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dd0:	fb07 1115 	mls	r1, r7, r5, r1
 8000dd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dd8:	fb05 f10e 	mul.w	r1, r5, lr
 8000ddc:	4291      	cmp	r1, r2
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x282>
 8000de0:	eb1c 0202 	adds.w	r2, ip, r2
 8000de4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de8:	d216      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000dea:	4291      	cmp	r1, r2
 8000dec:	d914      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000dee:	3d02      	subs	r5, #2
 8000df0:	4462      	add	r2, ip
 8000df2:	1a52      	subs	r2, r2, r1
 8000df4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000df8:	e738      	b.n	8000c6c <__udivmoddi4+0xfc>
 8000dfa:	4631      	mov	r1, r6
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e708      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000e00:	4639      	mov	r1, r7
 8000e02:	e6e6      	b.n	8000bd2 <__udivmoddi4+0x62>
 8000e04:	4610      	mov	r0, r2
 8000e06:	e6fb      	b.n	8000c00 <__udivmoddi4+0x90>
 8000e08:	4548      	cmp	r0, r9
 8000e0a:	d2a9      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e10:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e14:	3b01      	subs	r3, #1
 8000e16:	e7a3      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e18:	4645      	mov	r5, r8
 8000e1a:	e7ea      	b.n	8000df2 <__udivmoddi4+0x282>
 8000e1c:	462b      	mov	r3, r5
 8000e1e:	e794      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e20:	4640      	mov	r0, r8
 8000e22:	e7d1      	b.n	8000dc8 <__udivmoddi4+0x258>
 8000e24:	46d0      	mov	r8, sl
 8000e26:	e77b      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e28:	3d02      	subs	r5, #2
 8000e2a:	4462      	add	r2, ip
 8000e2c:	e732      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e70a      	b.n	8000c48 <__udivmoddi4+0xd8>
 8000e32:	4464      	add	r4, ip
 8000e34:	3802      	subs	r0, #2
 8000e36:	e742      	b.n	8000cbe <__udivmoddi4+0x14e>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	0000      	movs	r0, r0
	...

08000e40 <setArr>:
void ButtonMatrixRead();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setArr(uint16_t state){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	80fb      	strh	r3, [r7, #6]
	int realnum = log2(state);
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fb25 	bl	800049c <__aeabi_ui2d>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	ec43 2b10 	vmov	d0, r2, r3
 8000e5a:	f002 fd39 	bl	80038d0 <log>
 8000e5e:	ec51 0b10 	vmov	r0, r1, d0
 8000e62:	a316      	add	r3, pc, #88	; (adr r3, 8000ebc <setArr+0x7c>)
 8000e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e68:	f7ff fcbc 	bl	80007e4 <__aeabi_ddiv>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4610      	mov	r0, r2
 8000e72:	4619      	mov	r1, r3
 8000e74:	f7ff fe3c 	bl	8000af0 <__aeabi_d2iz>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60fb      	str	r3, [r7, #12]

	if(realnum == 7 || realnum == 11)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2b07      	cmp	r3, #7
 8000e80:	d011      	beq.n	8000ea6 <setArr+0x66>
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2b0b      	cmp	r3, #11
 8000e86:	d00e      	beq.n	8000ea6 <setArr+0x66>
		return;
	top++;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <setArr+0x70>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <setArr+0x70>)
 8000e90:	6013      	str	r3, [r2, #0]
	myArray[top] = keys[realnum];
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <setArr+0x70>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <setArr+0x74>)
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000e9e:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <setArr+0x78>)
 8000ea0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ea4:	e000      	b.n	8000ea8 <setArr+0x68>
		return;
 8000ea6:	bf00      	nop
}
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000070 	.word	0x20000070
 8000eb4:	20000058 	.word	0x20000058
 8000eb8:	20000040 	.word	0x20000040
 8000ebc:	fefa39ef 	.word	0xfefa39ef
 8000ec0:	3fe62e42 	.word	0x3fe62e42

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eca:	f000 fb3c 	bl	8001546 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ece:	f000 f86d 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed2:	f000 f901 	bl	80010d8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000ed6:	f000 f8b5 	bl	8001044 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2101      	movs	r1, #1
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee2:	f000 fe4b 	bl	8001b7c <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint32_t BTMX_TimeStamp = 0;
	  if(HAL_GetTick() > BTMX_TimeStamp)
 8000ee6:	f000 fb93 	bl	8001610 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <main+0xd4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d9f8      	bls.n	8000ee6 <main+0x22>
	  {
	  BTMX_TimeStamp = HAL_GetTick() + 25; //next scan in 25 ms
 8000ef4:	f000 fb8c 	bl	8001610 <HAL_GetTick>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	3319      	adds	r3, #25
 8000efc:	4a26      	ldr	r2, [pc, #152]	; (8000f98 <main+0xd4>)
 8000efe:	6013      	str	r3, [r2, #0]
	  ButtonMatrixRead();
 8000f00:	f000 f9ba 	bl	8001278 <ButtonMatrixRead>
	  GPIO_PinState S = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000f04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0c:	f000 fe1e 	bl	8001b4c <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	70fb      	strb	r3, [r7, #3]
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, ledState);
	  status = S;
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <main+0xd8>)
 8000f18:	6013      	str	r3, [r2, #0]
	  if (ButtonState != 0) {
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <main+0xdc>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00c      	beq.n	8000f3c <main+0x78>
		  setArr(ButtonState);
 8000f22:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <main+0xdc>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff8a 	bl	8000e40 <setArr>
		while(ButtonState != 0)
 8000f2c:	e001      	b.n	8000f32 <main+0x6e>
		{
			ButtonMatrixRead();
 8000f2e:	f000 f9a3 	bl	8001278 <ButtonMatrixRead>
		while(ButtonState != 0)
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <main+0xdc>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f9      	bne.n	8000f2e <main+0x6a>
 8000f3a:	e7d4      	b.n	8000ee6 <main+0x22>
		}
	  }
		else if(status == 0){
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <main+0xd8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1d0      	bne.n	8000ee6 <main+0x22>
			while(status == 0){
 8000f44:	e011      	b.n	8000f6a <main+0xa6>
				GPIO_PinState S = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000f46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f000 fdfd 	bl	8001b4c <HAL_GPIO_ReadPin>
 8000f52:	4603      	mov	r3, r0
 8000f54:	70bb      	strb	r3, [r7, #2]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, S);
 8000f56:	78bb      	ldrb	r3, [r7, #2]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f60:	f000 fe0c 	bl	8001b7c <HAL_GPIO_WritePin>
				status = S;
 8000f64:	78bb      	ldrb	r3, [r7, #2]
 8000f66:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <main+0xd8>)
 8000f68:	6013      	str	r3, [r2, #0]
			while(status == 0){
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <main+0xd8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0e9      	beq.n	8000f46 <main+0x82>
			}
			top = -1;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <main+0xe0>)
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	601a      	str	r2, [r3, #0]
			  for (int i = 0; i < 11; i++) {
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	e007      	b.n	8000f90 <main+0xcc>
					myArray[i] = 0;
 8000f80:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <main+0xe4>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2100      	movs	r1, #0
 8000f86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  for (int i = 0; i < 11; i++) {
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b0a      	cmp	r3, #10
 8000f94:	ddf4      	ble.n	8000f80 <main+0xbc>
  {
 8000f96:	e7a6      	b.n	8000ee6 <main+0x22>
 8000f98:	20000184 	.word	0x20000184
 8000f9c:	20000180 	.word	0x20000180
 8000fa0:	2000017c 	.word	0x2000017c
 8000fa4:	20000070 	.word	0x20000070
 8000fa8:	20000040 	.word	0x20000040

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	; 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0318 	add.w	r3, r7, #24
 8000fb6:	2238      	movs	r2, #56	; 0x38
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 fc54 	bl	8003868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 fe10 	bl	8001bf4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fde:	2340      	movs	r3, #64	; 0x40
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fea:	2304      	movs	r3, #4
 8000fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fee:	2355      	movs	r3, #85	; 0x55
 8000ff0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffe:	f107 0318 	add.w	r3, r7, #24
 8001002:	4618      	mov	r0, r3
 8001004:	f000 feaa 	bl	8001d5c <HAL_RCC_OscConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800100e:	f000 f9ab 	bl	8001368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001012:	230f      	movs	r3, #15
 8001014:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001016:	2303      	movs	r3, #3
 8001018:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	2104      	movs	r1, #4
 800102a:	4618      	mov	r0, r3
 800102c:	f001 f9ae 	bl	800238c <HAL_RCC_ClockConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001036:	f000 f997 	bl	8001368 <Error_Handler>
  }
}
 800103a:	bf00      	nop
 800103c:	3750      	adds	r7, #80	; 0x50
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 800104a:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <MX_LPUART1_UART_Init+0x90>)
 800104c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 8001082:	2200      	movs	r2, #0
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001086:	4812      	ldr	r0, [pc, #72]	; (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 8001088:	f001 fdea 	bl	8002c60 <HAL_UART_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001092:	f000 f969 	bl	8001368 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001096:	2100      	movs	r1, #0
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 800109a:	f002 fb1b 	bl	80036d4 <HAL_UARTEx_SetTxFifoThreshold>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80010a4:	f000 f960 	bl	8001368 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a8:	2100      	movs	r1, #0
 80010aa:	4809      	ldr	r0, [pc, #36]	; (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 80010ac:	f002 fb50 	bl	8003750 <HAL_UARTEx_SetRxFifoThreshold>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80010b6:	f000 f957 	bl	8001368 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 80010bc:	f002 fad1 	bl	8003662 <HAL_UARTEx_DisableFifoMode>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80010c6:	f000 f94f 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200000ec 	.word	0x200000ec
 80010d4:	40008000 	.word	0x40008000

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	4b5f      	ldr	r3, [pc, #380]	; (800126c <MX_GPIO_Init+0x194>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a5e      	ldr	r2, [pc, #376]	; (800126c <MX_GPIO_Init+0x194>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b5c      	ldr	r3, [pc, #368]	; (800126c <MX_GPIO_Init+0x194>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001106:	4b59      	ldr	r3, [pc, #356]	; (800126c <MX_GPIO_Init+0x194>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a58      	ldr	r2, [pc, #352]	; (800126c <MX_GPIO_Init+0x194>)
 800110c:	f043 0320 	orr.w	r3, r3, #32
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b56      	ldr	r3, [pc, #344]	; (800126c <MX_GPIO_Init+0x194>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0320 	and.w	r3, r3, #32
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b53      	ldr	r3, [pc, #332]	; (800126c <MX_GPIO_Init+0x194>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a52      	ldr	r2, [pc, #328]	; (800126c <MX_GPIO_Init+0x194>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b50      	ldr	r3, [pc, #320]	; (800126c <MX_GPIO_Init+0x194>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b4d      	ldr	r3, [pc, #308]	; (800126c <MX_GPIO_Init+0x194>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a4c      	ldr	r2, [pc, #304]	; (800126c <MX_GPIO_Init+0x194>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b4a      	ldr	r3, [pc, #296]	; (800126c <MX_GPIO_Init+0x194>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2121      	movs	r1, #33	; 0x21
 8001152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001156:	f000 fd11 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001160:	4843      	ldr	r0, [pc, #268]	; (8001270 <MX_GPIO_Init+0x198>)
 8001162:	f000 fd0b 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f000 fd04 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800117a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800117e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	483a      	ldr	r0, [pc, #232]	; (8001274 <MX_GPIO_Init+0x19c>)
 800118c:	f000 fb5c 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8001190:	2321      	movs	r3, #33	; 0x21
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011aa:	f000 fb4d 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80011ae:	f44f 7320 	mov.w	r3, #640	; 0x280
 80011b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c6:	f000 fb3f 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80011ca:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011d0:	2311      	movs	r3, #17
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4823      	ldr	r0, [pc, #140]	; (8001270 <MX_GPIO_Init+0x198>)
 80011e4:	f000 fb30 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	481e      	ldr	r0, [pc, #120]	; (8001274 <MX_GPIO_Init+0x19c>)
 80011fc:	f000 fb24 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001206:	2311      	movs	r3, #17
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121c:	f000 fb14 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001238:	f000 fb06 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800123c:	2340      	movs	r3, #64	; 0x40
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001244:	2301      	movs	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <MX_GPIO_Init+0x198>)
 8001250:	f000 fafa 	bl	8001848 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	2028      	movs	r0, #40	; 0x28
 800125a:	f000 fac0 	bl	80017de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800125e:	2028      	movs	r0, #40	; 0x28
 8001260:	f000 fad7 	bl	8001812 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001264:	bf00      	nop
 8001266:	3728      	adds	r7, #40	; 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40021000 	.word	0x40021000
 8001270:	48000400 	.word	0x48000400
 8001274:	48000800 	.word	0x48000800

08001278 <ButtonMatrixRead>:

/* USER CODE BEGIN 4 */
void ButtonMatrixRead(){
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
static uint8_t X=0;
for(int i=0; i<4; i++)
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	e037      	b.n	80012f4 <ButtonMatrixRead+0x7c>
{
if(HAL_GPIO_ReadPin(BMX_L[i].Port, BMX_L[i].Pin) == GPIO_PIN_RESET)
 8001284:	4a34      	ldr	r2, [pc, #208]	; (8001358 <ButtonMatrixRead+0xe0>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800128c:	4932      	ldr	r1, [pc, #200]	; (8001358 <ButtonMatrixRead+0xe0>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	440b      	add	r3, r1
 8001294:	889b      	ldrh	r3, [r3, #4]
 8001296:	4619      	mov	r1, r3
 8001298:	4610      	mov	r0, r2
 800129a:	f000 fc57 	bl	8001b4c <HAL_GPIO_ReadPin>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d111      	bne.n	80012c8 <ButtonMatrixRead+0x50>
{ //�?ุ�?มถู�?�?ด
ButtonState |= 1 << (i + (X * 4));
 80012a4:	4b2d      	ldr	r3, [pc, #180]	; (800135c <ButtonMatrixRead+0xe4>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	009a      	lsls	r2, r3, #2
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	2201      	movs	r2, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <ButtonMatrixRead+0xe8>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	b21b      	sxth	r3, r3
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	4b27      	ldr	r3, [pc, #156]	; (8001360 <ButtonMatrixRead+0xe8>)
 80012c4:	801a      	strh	r2, [r3, #0]
 80012c6:	e012      	b.n	80012ee <ButtonMatrixRead+0x76>
}
else
{
ButtonState &= ~(1 << (i + (X * 4)));
 80012c8:	4b24      	ldr	r3, [pc, #144]	; (800135c <ButtonMatrixRead+0xe4>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	009a      	lsls	r2, r3, #2
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	2201      	movs	r2, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	b21b      	sxth	r3, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	b21a      	sxth	r2, r3
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <ButtonMatrixRead+0xe8>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	4013      	ands	r3, r2
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <ButtonMatrixRead+0xe8>)
 80012ec:	801a      	strh	r2, [r3, #0]
for(int i=0; i<4; i++)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3301      	adds	r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	ddc4      	ble.n	8001284 <ButtonMatrixRead+0xc>
}
}
//set currentL to Hi-z (open drain)
HAL_GPIO_WritePin(BMX_R[X].Port, BMX_R[X].Pin, GPIO_PIN_SET);
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <ButtonMatrixRead+0xe4>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <ButtonMatrixRead+0xec>)
 8001302:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <ButtonMatrixRead+0xe4>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4a16      	ldr	r2, [pc, #88]	; (8001364 <ButtonMatrixRead+0xec>)
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4413      	add	r3, r2
 8001310:	889b      	ldrh	r3, [r3, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	4619      	mov	r1, r3
 8001316:	f000 fc31 	bl	8001b7c <HAL_GPIO_WritePin>
//set nextL to low
uint8_t nextX = (X + 1) % 4;
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <ButtonMatrixRead+0xe4>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	425a      	negs	r2, r3
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	f002 0203 	and.w	r2, r2, #3
 800132a:	bf58      	it	pl
 800132c:	4253      	negpl	r3, r2
 800132e:	70fb      	strb	r3, [r7, #3]
HAL_GPIO_WritePin(BMX_R[nextX].Port, BMX_R[nextX].Pin, GPIO_PIN_RESET);
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	4a0c      	ldr	r2, [pc, #48]	; (8001364 <ButtonMatrixRead+0xec>)
 8001334:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <ButtonMatrixRead+0xec>)
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4413      	add	r3, r2
 8001340:	889b      	ldrh	r3, [r3, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	4619      	mov	r1, r3
 8001346:	f000 fc19 	bl	8001b7c <HAL_GPIO_WritePin>
X = nextX;
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <ButtonMatrixRead+0xe4>)
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	7013      	strb	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000000 	.word	0x20000000
 800135c:	20000188 	.word	0x20000188
 8001360:	2000017c 	.word	0x2000017c
 8001364:	20000020 	.word	0x20000020

08001368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800136c:	b672      	cpsid	i
}
 800136e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001370:	e7fe      	b.n	8001370 <Error_Handler+0x8>
	...

08001374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_MspInit+0x44>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_MspInit+0x44>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6613      	str	r3, [r2, #96]	; 0x60
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_MspInit+0x44>)
 8001388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_MspInit+0x44>)
 8001394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <HAL_MspInit+0x44>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	6593      	str	r3, [r2, #88]	; 0x58
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_MspInit+0x44>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013aa:	f000 fcc7 	bl	8001d3c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000

080013bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b09e      	sub	sp, #120	; 0x78
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	2254      	movs	r2, #84	; 0x54
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fa43 	bl	8003868 <memset>
  if(huart->Instance==LPUART1)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a1f      	ldr	r2, [pc, #124]	; (8001464 <HAL_UART_MspInit+0xa8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d136      	bne.n	800145a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80013ec:	2320      	movs	r3, #32
 80013ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 f9e3 	bl	80027c4 <HAL_RCCEx_PeriphCLKConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001404:	f7ff ffb0 	bl	8001368 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_UART_MspInit+0xac>)
 800140a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140c:	4a16      	ldr	r2, [pc, #88]	; (8001468 <HAL_UART_MspInit+0xac>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_UART_MspInit+0xac>)
 8001416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_UART_MspInit+0xac>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001424:	4a10      	ldr	r2, [pc, #64]	; (8001468 <HAL_UART_MspInit+0xac>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142c:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_UART_MspInit+0xac>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001438:	230c      	movs	r3, #12
 800143a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001448:	230c      	movs	r3, #12
 800144a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001450:	4619      	mov	r1, r3
 8001452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001456:	f000 f9f7 	bl	8001848 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	3778      	adds	r7, #120	; 0x78
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40008000 	.word	0x40008000
 8001468:	40021000 	.word	0x40021000

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <NMI_Handler+0x4>

08001472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <MemManage_Handler+0x4>

0800147e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <UsageFault_Handler+0x4>

0800148a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b8:	f000 f898 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80014c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014c8:	f000 fb70 	bl	8001bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <SystemInit+0x20>)
 80014d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <SystemInit+0x20>)
 80014dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f8:	480d      	ldr	r0, [pc, #52]	; (8001530 <LoopForever+0x6>)
  ldr r1, =_edata
 80014fa:	490e      	ldr	r1, [pc, #56]	; (8001534 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014fc:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <LoopForever+0xe>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001510:	4c0b      	ldr	r4, [pc, #44]	; (8001540 <LoopForever+0x16>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800151e:	f7ff ffd7 	bl	80014d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001522:	f002 f9af 	bl	8003884 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001526:	f7ff fccd 	bl	8000ec4 <main>

0800152a <LoopForever>:

LoopForever:
    b LoopForever
 800152a:	e7fe      	b.n	800152a <LoopForever>
  ldr   r0, =_estack
 800152c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8001538:	08003d40 	.word	0x08003d40
  ldr r2, =_sbss
 800153c:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001540:	200002c8 	.word	0x200002c8

08001544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC1_2_IRQHandler>

08001546 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f939 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f80e 	bl	8001578 <HAL_InitTick>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d002      	beq.n	8001568 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	71fb      	strb	r3, [r7, #7]
 8001566:	e001      	b.n	800156c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001568:	f7ff ff04 	bl	8001374 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800156c:	79fb      	ldrb	r3, [r7, #7]

}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <HAL_InitTick+0x68>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d022      	beq.n	80015d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_InitTick+0x6c>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <HAL_InitTick+0x68>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001598:	fbb1 f3f3 	udiv	r3, r1, r3
 800159c:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 f944 	bl	800182e <HAL_SYSTICK_Config>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10f      	bne.n	80015cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b0f      	cmp	r3, #15
 80015b0:	d809      	bhi.n	80015c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b2:	2200      	movs	r2, #0
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	f04f 30ff 	mov.w	r0, #4294967295
 80015ba:	f000 f910 	bl	80017de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_InitTick+0x70>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e007      	b.n	80015d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	73fb      	strb	r3, [r7, #15]
 80015ca:	e004      	b.n	80015d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e001      	b.n	80015d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000007c 	.word	0x2000007c
 80015e4:	20000074 	.word	0x20000074
 80015e8:	20000078 	.word	0x20000078

080015ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_IncTick+0x1c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_IncTick+0x20>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4413      	add	r3, r2
 80015fa:	4a03      	ldr	r2, [pc, #12]	; (8001608 <HAL_IncTick+0x1c>)
 80015fc:	6013      	str	r3, [r2, #0]
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	2000018c 	.word	0x2000018c
 800160c:	2000007c 	.word	0x2000007c

08001610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_GetTick+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	2000018c 	.word	0x2000018c

08001628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <__NVIC_SetPriorityGrouping+0x44>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001644:	4013      	ands	r3, r2
 8001646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165a:	4a04      	ldr	r2, [pc, #16]	; (800166c <__NVIC_SetPriorityGrouping+0x44>)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	60d3      	str	r3, [r2, #12]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <__NVIC_GetPriorityGrouping+0x18>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	f003 0307 	and.w	r3, r3, #7
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	2b00      	cmp	r3, #0
 800169c:	db0b      	blt.n	80016b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	f003 021f 	and.w	r2, r3, #31
 80016a4:	4907      	ldr	r1, [pc, #28]	; (80016c4 <__NVIC_EnableIRQ+0x38>)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	2001      	movs	r0, #1
 80016ae:	fa00 f202 	lsl.w	r2, r0, r2
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100

080016c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db0a      	blt.n	80016f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	490c      	ldr	r1, [pc, #48]	; (8001714 <__NVIC_SetPriority+0x4c>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	440b      	add	r3, r1
 80016ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f0:	e00a      	b.n	8001708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4908      	ldr	r1, [pc, #32]	; (8001718 <__NVIC_SetPriority+0x50>)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3b04      	subs	r3, #4
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	440b      	add	r3, r1
 8001706:	761a      	strb	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f1c3 0307 	rsb	r3, r3, #7
 8001736:	2b04      	cmp	r3, #4
 8001738:	bf28      	it	cs
 800173a:	2304      	movcs	r3, #4
 800173c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3304      	adds	r3, #4
 8001742:	2b06      	cmp	r3, #6
 8001744:	d902      	bls.n	800174c <NVIC_EncodePriority+0x30>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3b03      	subs	r3, #3
 800174a:	e000      	b.n	800174e <NVIC_EncodePriority+0x32>
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	f04f 32ff 	mov.w	r2, #4294967295
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001764:	f04f 31ff 	mov.w	r1, #4294967295
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43d9      	mvns	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	4313      	orrs	r3, r2
         );
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	; 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001794:	d301      	bcc.n	800179a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001796:	2301      	movs	r3, #1
 8001798:	e00f      	b.n	80017ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <SysTick_Config+0x40>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a2:	210f      	movs	r1, #15
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f7ff ff8e 	bl	80016c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <SysTick_Config+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <SysTick_Config+0x40>)
 80017b4:	2207      	movs	r2, #7
 80017b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010

080017c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff29 	bl	8001628 <__NVIC_SetPriorityGrouping>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017ec:	f7ff ff40 	bl	8001670 <__NVIC_GetPriorityGrouping>
 80017f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	6978      	ldr	r0, [r7, #20]
 80017f8:	f7ff ff90 	bl	800171c <NVIC_EncodePriority>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff5f 	bl	80016c8 <__NVIC_SetPriority>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff33 	bl	800168c <__NVIC_EnableIRQ>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ffa4 	bl	8001784 <SysTick_Config>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001856:	e15a      	b.n	8001b0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2101      	movs	r1, #1
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	4013      	ands	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 814c 	beq.w	8001b08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	2b01      	cmp	r3, #1
 800187a:	d005      	beq.n	8001888 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001884:	2b02      	cmp	r3, #2
 8001886:	d130      	bne.n	80018ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	2203      	movs	r2, #3
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018be:	2201      	movs	r2, #1
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	091b      	lsrs	r3, r3, #4
 80018d4:	f003 0201 	and.w	r2, r3, #1
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d017      	beq.n	8001926 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d123      	bne.n	800197a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	08da      	lsrs	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3208      	adds	r2, #8
 800193a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	220f      	movs	r2, #15
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	691a      	ldr	r2, [r3, #16]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	08da      	lsrs	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3208      	adds	r2, #8
 8001974:	6939      	ldr	r1, [r7, #16]
 8001976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	2203      	movs	r2, #3
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0203 	and.w	r2, r3, #3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80a6 	beq.w	8001b08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019bc:	4b5b      	ldr	r3, [pc, #364]	; (8001b2c <HAL_GPIO_Init+0x2e4>)
 80019be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c0:	4a5a      	ldr	r2, [pc, #360]	; (8001b2c <HAL_GPIO_Init+0x2e4>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6613      	str	r3, [r2, #96]	; 0x60
 80019c8:	4b58      	ldr	r3, [pc, #352]	; (8001b2c <HAL_GPIO_Init+0x2e4>)
 80019ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d4:	4a56      	ldr	r2, [pc, #344]	; (8001b30 <HAL_GPIO_Init+0x2e8>)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019fe:	d01f      	beq.n	8001a40 <HAL_GPIO_Init+0x1f8>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a4c      	ldr	r2, [pc, #304]	; (8001b34 <HAL_GPIO_Init+0x2ec>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d019      	beq.n	8001a3c <HAL_GPIO_Init+0x1f4>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a4b      	ldr	r2, [pc, #300]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d013      	beq.n	8001a38 <HAL_GPIO_Init+0x1f0>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a4a      	ldr	r2, [pc, #296]	; (8001b3c <HAL_GPIO_Init+0x2f4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d00d      	beq.n	8001a34 <HAL_GPIO_Init+0x1ec>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a49      	ldr	r2, [pc, #292]	; (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d007      	beq.n	8001a30 <HAL_GPIO_Init+0x1e8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a48      	ldr	r2, [pc, #288]	; (8001b44 <HAL_GPIO_Init+0x2fc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_GPIO_Init+0x1e4>
 8001a28:	2305      	movs	r3, #5
 8001a2a:	e00a      	b.n	8001a42 <HAL_GPIO_Init+0x1fa>
 8001a2c:	2306      	movs	r3, #6
 8001a2e:	e008      	b.n	8001a42 <HAL_GPIO_Init+0x1fa>
 8001a30:	2304      	movs	r3, #4
 8001a32:	e006      	b.n	8001a42 <HAL_GPIO_Init+0x1fa>
 8001a34:	2303      	movs	r3, #3
 8001a36:	e004      	b.n	8001a42 <HAL_GPIO_Init+0x1fa>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e002      	b.n	8001a42 <HAL_GPIO_Init+0x1fa>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <HAL_GPIO_Init+0x1fa>
 8001a40:	2300      	movs	r3, #0
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	f002 0203 	and.w	r2, r2, #3
 8001a48:	0092      	lsls	r2, r2, #2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a52:	4937      	ldr	r1, [pc, #220]	; (8001b30 <HAL_GPIO_Init+0x2e8>)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a60:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <HAL_GPIO_Init+0x300>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a84:	4a30      	ldr	r2, [pc, #192]	; (8001b48 <HAL_GPIO_Init+0x300>)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a8a:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <HAL_GPIO_Init+0x300>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aae:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <HAL_GPIO_Init+0x300>)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_GPIO_Init+0x300>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ad8:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <HAL_GPIO_Init+0x300>)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_GPIO_Init+0x300>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b02:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <HAL_GPIO_Init+0x300>)
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f47f ae9d 	bne.w	8001858 <HAL_GPIO_Init+0x10>
  }
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010000 	.word	0x40010000
 8001b34:	48000400 	.word	0x48000400
 8001b38:	48000800 	.word	0x48000800
 8001b3c:	48000c00 	.word	0x48000c00
 8001b40:	48001000 	.word	0x48001000
 8001b44:	48001400 	.word	0x48001400
 8001b48:	40010400 	.word	0x40010400

08001b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	e001      	b.n	8001b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b8c:	787b      	ldrb	r3, [r7, #1]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b98:	e002      	b.n	8001ba0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b9a:	887a      	ldrh	r2, [r7, #2]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f806 	bl	8001bdc <HAL_GPIO_EXTI_Callback>
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40010400 	.word	0x40010400

08001bdc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d141      	bne.n	8001c86 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c02:	4b4b      	ldr	r3, [pc, #300]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0e:	d131      	bne.n	8001c74 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c10:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c16:	4a46      	ldr	r2, [pc, #280]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c20:	4b43      	ldr	r3, [pc, #268]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c28:	4a41      	ldr	r2, [pc, #260]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c30:	4b40      	ldr	r3, [pc, #256]	; (8001d34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2232      	movs	r2, #50	; 0x32
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	4a3f      	ldr	r2, [pc, #252]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c40:	0c9b      	lsrs	r3, r3, #18
 8001c42:	3301      	adds	r3, #1
 8001c44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c46:	e002      	b.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c4e:	4b38      	ldr	r3, [pc, #224]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c5a:	d102      	bne.n	8001c62 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f2      	bne.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c62:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c6e:	d158      	bne.n	8001d22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e057      	b.n	8001d24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c74:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c7a:	4a2d      	ldr	r2, [pc, #180]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c84:	e04d      	b.n	8001d22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c8c:	d141      	bne.n	8001d12 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c8e:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c9a:	d131      	bne.n	8001d00 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c9c:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ca2:	4a23      	ldr	r2, [pc, #140]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cac:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cb4:	4a1e      	ldr	r2, [pc, #120]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2232      	movs	r2, #50	; 0x32
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	4a1c      	ldr	r2, [pc, #112]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ccc:	0c9b      	lsrs	r3, r3, #18
 8001cce:	3301      	adds	r3, #1
 8001cd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cd2:	e002      	b.n	8001cda <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce6:	d102      	bne.n	8001cee <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f2      	bne.n	8001cd4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cfa:	d112      	bne.n	8001d22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e011      	b.n	8001d24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d10:	e007      	b.n	8001d22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d12:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d1a:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d20:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	40007000 	.word	0x40007000
 8001d34:	20000074 	.word	0x20000074
 8001d38:	431bde83 	.word	0x431bde83

08001d3c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d4a:	6093      	str	r3, [r2, #8]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40007000 	.word	0x40007000

08001d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e306      	b.n	800237c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d075      	beq.n	8001e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d7a:	4b97      	ldr	r3, [pc, #604]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d84:	4b94      	ldr	r3, [pc, #592]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2b0c      	cmp	r3, #12
 8001d92:	d102      	bne.n	8001d9a <HAL_RCC_OscConfig+0x3e>
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d002      	beq.n	8001da0 <HAL_RCC_OscConfig+0x44>
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d10b      	bne.n	8001db8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	4b8d      	ldr	r3, [pc, #564]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d05b      	beq.n	8001e64 <HAL_RCC_OscConfig+0x108>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d157      	bne.n	8001e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e2e1      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc0:	d106      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x74>
 8001dc2:	4b85      	ldr	r3, [pc, #532]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a84      	ldr	r2, [pc, #528]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e01d      	b.n	8001e0c <HAL_RCC_OscConfig+0xb0>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x98>
 8001dda:	4b7f      	ldr	r3, [pc, #508]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a7e      	ldr	r2, [pc, #504]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	4b7c      	ldr	r3, [pc, #496]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a7b      	ldr	r2, [pc, #492]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e00b      	b.n	8001e0c <HAL_RCC_OscConfig+0xb0>
 8001df4:	4b78      	ldr	r3, [pc, #480]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a77      	ldr	r2, [pc, #476]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b75      	ldr	r3, [pc, #468]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a74      	ldr	r2, [pc, #464]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d013      	beq.n	8001e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff fbfc 	bl	8001610 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7ff fbf8 	bl	8001610 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e2a6      	b.n	800237c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2e:	4b6a      	ldr	r3, [pc, #424]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0xc0>
 8001e3a:	e014      	b.n	8001e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fbe8 	bl	8001610 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e44:	f7ff fbe4 	bl	8001610 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e292      	b.n	800237c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e56:	4b60      	ldr	r3, [pc, #384]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0xe8>
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d075      	beq.n	8001f5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e72:	4b59      	ldr	r3, [pc, #356]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e7c:	4b56      	ldr	r3, [pc, #344]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	2b0c      	cmp	r3, #12
 8001e8a:	d102      	bne.n	8001e92 <HAL_RCC_OscConfig+0x136>
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d002      	beq.n	8001e98 <HAL_RCC_OscConfig+0x13c>
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d11f      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e98:	4b4f      	ldr	r3, [pc, #316]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x154>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e265      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	4b49      	ldr	r3, [pc, #292]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	061b      	lsls	r3, r3, #24
 8001ebe:	4946      	ldr	r1, [pc, #280]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ec4:	4b45      	ldr	r3, [pc, #276]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fb55 	bl	8001578 <HAL_InitTick>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d043      	beq.n	8001f5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e251      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d023      	beq.n	8001f28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee0:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a3c      	ldr	r2, [pc, #240]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7ff fb90 	bl	8001610 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef4:	f7ff fb8c 	bl	8001610 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e23a      	b.n	800237c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f06:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f12:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	061b      	lsls	r3, r3, #24
 8001f20:	492d      	ldr	r1, [pc, #180]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
 8001f26:	e01a      	b.n	8001f5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f28:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a2a      	ldr	r2, [pc, #168]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001f2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f34:	f7ff fb6c 	bl	8001610 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3c:	f7ff fb68 	bl	8001610 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e216      	b.n	800237c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f4e:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x1e0>
 8001f5a:	e000      	b.n	8001f5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d041      	beq.n	8001fee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01c      	beq.n	8001fac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f72:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f78:	4a17      	ldr	r2, [pc, #92]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f82:	f7ff fb45 	bl	8001610 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8a:	f7ff fb41 	bl	8001610 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e1ef      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0ef      	beq.n	8001f8a <HAL_RCC_OscConfig+0x22e>
 8001faa:	e020      	b.n	8001fee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbc:	f7ff fb28 	bl	8001610 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc2:	e00d      	b.n	8001fe0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc4:	f7ff fb24 	bl	8001610 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d906      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e1d2      	b.n	800237c <HAL_RCC_OscConfig+0x620>
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	20000078 	.word	0x20000078
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fe0:	4b8c      	ldr	r3, [pc, #560]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8001fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1ea      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80a6 	beq.w	8002148 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002000:	4b84      	ldr	r3, [pc, #528]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_RCC_OscConfig+0x2b4>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x2b6>
 8002010:	2300      	movs	r3, #0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00d      	beq.n	8002032 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002016:	4b7f      	ldr	r3, [pc, #508]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201a:	4a7e      	ldr	r2, [pc, #504]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6593      	str	r3, [r2, #88]	; 0x58
 8002022:	4b7c      	ldr	r3, [pc, #496]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800202e:	2301      	movs	r3, #1
 8002030:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002032:	4b79      	ldr	r3, [pc, #484]	; (8002218 <HAL_RCC_OscConfig+0x4bc>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d118      	bne.n	8002070 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800203e:	4b76      	ldr	r3, [pc, #472]	; (8002218 <HAL_RCC_OscConfig+0x4bc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a75      	ldr	r2, [pc, #468]	; (8002218 <HAL_RCC_OscConfig+0x4bc>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204a:	f7ff fae1 	bl	8001610 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002052:	f7ff fadd 	bl	8001610 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e18b      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002064:	4b6c      	ldr	r3, [pc, #432]	; (8002218 <HAL_RCC_OscConfig+0x4bc>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d108      	bne.n	800208a <HAL_RCC_OscConfig+0x32e>
 8002078:	4b66      	ldr	r3, [pc, #408]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	4a65      	ldr	r2, [pc, #404]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002088:	e024      	b.n	80020d4 <HAL_RCC_OscConfig+0x378>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b05      	cmp	r3, #5
 8002090:	d110      	bne.n	80020b4 <HAL_RCC_OscConfig+0x358>
 8002092:	4b60      	ldr	r3, [pc, #384]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002098:	4a5e      	ldr	r2, [pc, #376]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a2:	4b5c      	ldr	r3, [pc, #368]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a8:	4a5a      	ldr	r2, [pc, #360]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020b2:	e00f      	b.n	80020d4 <HAL_RCC_OscConfig+0x378>
 80020b4:	4b57      	ldr	r3, [pc, #348]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	4a56      	ldr	r2, [pc, #344]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020c4:	4b53      	ldr	r3, [pc, #332]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ca:	4a52      	ldr	r2, [pc, #328]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80020cc:	f023 0304 	bic.w	r3, r3, #4
 80020d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d016      	beq.n	800210a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7ff fa98 	bl	8001610 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e4:	f7ff fa94 	bl	8001610 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e140      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fa:	4b46      	ldr	r3, [pc, #280]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0ed      	beq.n	80020e4 <HAL_RCC_OscConfig+0x388>
 8002108:	e015      	b.n	8002136 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210a:	f7ff fa81 	bl	8001610 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002110:	e00a      	b.n	8002128 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002112:	f7ff fa7d 	bl	8001610 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e129      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002128:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1ed      	bne.n	8002112 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002136:	7ffb      	ldrb	r3, [r7, #31]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d105      	bne.n	8002148 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800213c:	4b35      	ldr	r3, [pc, #212]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	4a34      	ldr	r2, [pc, #208]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8002142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002146:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b00      	cmp	r3, #0
 8002152:	d03c      	beq.n	80021ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01c      	beq.n	8002196 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800215c:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 800215e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002162:	4a2c      	ldr	r2, [pc, #176]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7ff fa50 	bl	8001610 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002174:	f7ff fa4c 	bl	8001610 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0fa      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8002188:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ef      	beq.n	8002174 <HAL_RCC_OscConfig+0x418>
 8002194:	e01b      	b.n	80021ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002196:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8002198:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800219c:	4a1d      	ldr	r2, [pc, #116]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 800219e:	f023 0301 	bic.w	r3, r3, #1
 80021a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a6:	f7ff fa33 	bl	8001610 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ae:	f7ff fa2f 	bl	8001610 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e0dd      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021c0:	4b14      	ldr	r3, [pc, #80]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80021c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1ef      	bne.n	80021ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80d1 	beq.w	800237a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021d8:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b0c      	cmp	r3, #12
 80021e2:	f000 808b 	beq.w	80022fc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d15e      	bne.n	80022ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a08      	ldr	r2, [pc, #32]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80021f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7ff fa09 	bl	8001610 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002200:	e00c      	b.n	800221c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002202:	f7ff fa05 	bl	8001610 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d905      	bls.n	800221c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e0b3      	b.n	800237c <HAL_RCC_OscConfig+0x620>
 8002214:	40021000 	.word	0x40021000
 8002218:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800221c:	4b59      	ldr	r3, [pc, #356]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1ec      	bne.n	8002202 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002228:	4b56      	ldr	r3, [pc, #344]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	4b56      	ldr	r3, [pc, #344]	; (8002388 <HAL_RCC_OscConfig+0x62c>)
 800222e:	4013      	ands	r3, r2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6a11      	ldr	r1, [r2, #32]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002238:	3a01      	subs	r2, #1
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	4311      	orrs	r1, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002242:	0212      	lsls	r2, r2, #8
 8002244:	4311      	orrs	r1, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800224a:	0852      	lsrs	r2, r2, #1
 800224c:	3a01      	subs	r2, #1
 800224e:	0552      	lsls	r2, r2, #21
 8002250:	4311      	orrs	r1, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002256:	0852      	lsrs	r2, r2, #1
 8002258:	3a01      	subs	r2, #1
 800225a:	0652      	lsls	r2, r2, #25
 800225c:	4311      	orrs	r1, r2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002262:	06d2      	lsls	r2, r2, #27
 8002264:	430a      	orrs	r2, r1
 8002266:	4947      	ldr	r1, [pc, #284]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 8002268:	4313      	orrs	r3, r2
 800226a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800226c:	4b45      	ldr	r3, [pc, #276]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a44      	ldr	r2, [pc, #272]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 8002272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002276:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002278:	4b42      	ldr	r3, [pc, #264]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4a41      	ldr	r2, [pc, #260]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 800227e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002282:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7ff f9c4 	bl	8001610 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228c:	f7ff f9c0 	bl	8001610 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e06e      	b.n	800237c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229e:	4b39      	ldr	r3, [pc, #228]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0x530>
 80022aa:	e066      	b.n	800237a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ac:	4b35      	ldr	r3, [pc, #212]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a34      	ldr	r2, [pc, #208]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 80022b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022b6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022b8:	4b32      	ldr	r3, [pc, #200]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4a31      	ldr	r2, [pc, #196]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 80022be:	f023 0303 	bic.w	r3, r3, #3
 80022c2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022c4:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a2e      	ldr	r2, [pc, #184]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 80022ca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7ff f99c 	bl	8001610 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022dc:	f7ff f998 	bl	8001610 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e046      	b.n	800237c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ee:	4b25      	ldr	r3, [pc, #148]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x580>
 80022fa:	e03e      	b.n	800237a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e039      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002308:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f003 0203 	and.w	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	429a      	cmp	r2, r3
 800231a:	d12c      	bne.n	8002376 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	3b01      	subs	r3, #1
 8002328:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d123      	bne.n	8002376 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d11b      	bne.n	8002376 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d113      	bne.n	8002376 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	085b      	lsrs	r3, r3, #1
 800235a:	3b01      	subs	r3, #1
 800235c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d109      	bne.n	8002376 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236c:	085b      	lsrs	r3, r3, #1
 800236e:	3b01      	subs	r3, #1
 8002370:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d001      	beq.n	800237a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	019f800c 	.word	0x019f800c

0800238c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e11e      	b.n	80025e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023a4:	4b91      	ldr	r3, [pc, #580]	; (80025ec <HAL_RCC_ClockConfig+0x260>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d910      	bls.n	80023d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b8e      	ldr	r3, [pc, #568]	; (80025ec <HAL_RCC_ClockConfig+0x260>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f023 020f 	bic.w	r2, r3, #15
 80023ba:	498c      	ldr	r1, [pc, #560]	; (80025ec <HAL_RCC_ClockConfig+0x260>)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	4313      	orrs	r3, r2
 80023c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b8a      	ldr	r3, [pc, #552]	; (80025ec <HAL_RCC_ClockConfig+0x260>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e106      	b.n	80025e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d073      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d129      	bne.n	800243c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e8:	4b81      	ldr	r3, [pc, #516]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0f4      	b.n	80025e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023f8:	f000 f99e 	bl	8002738 <RCC_GetSysClockFreqFromPLLSource>
 80023fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4a7c      	ldr	r2, [pc, #496]	; (80025f4 <HAL_RCC_ClockConfig+0x268>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d93f      	bls.n	8002486 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002406:	4b7a      	ldr	r3, [pc, #488]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d009      	beq.n	8002426 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800241a:	2b00      	cmp	r3, #0
 800241c:	d033      	beq.n	8002486 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002422:	2b00      	cmp	r3, #0
 8002424:	d12f      	bne.n	8002486 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002426:	4b72      	ldr	r3, [pc, #456]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800242e:	4a70      	ldr	r2, [pc, #448]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002434:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	e024      	b.n	8002486 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d107      	bne.n	8002454 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002444:	4b6a      	ldr	r3, [pc, #424]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d109      	bne.n	8002464 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0c6      	b.n	80025e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002454:	4b66      	ldr	r3, [pc, #408]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0be      	b.n	80025e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002464:	f000 f8ce 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 8002468:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4a61      	ldr	r2, [pc, #388]	; (80025f4 <HAL_RCC_ClockConfig+0x268>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d909      	bls.n	8002486 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002472:	4b5f      	ldr	r3, [pc, #380]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800247a:	4a5d      	ldr	r2, [pc, #372]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 800247c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002480:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002486:	4b5a      	ldr	r3, [pc, #360]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f023 0203 	bic.w	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4957      	ldr	r1, [pc, #348]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002498:	f7ff f8ba 	bl	8001610 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7ff f8b6 	bl	8001610 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e095      	b.n	80025e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	4b4e      	ldr	r3, [pc, #312]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 020c 	and.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1eb      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d023      	beq.n	800251c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e0:	4b43      	ldr	r3, [pc, #268]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a42      	ldr	r2, [pc, #264]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 80024e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024f8:	4b3d      	ldr	r3, [pc, #244]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002500:	4a3b      	ldr	r2, [pc, #236]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002502:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002506:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002508:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4936      	ldr	r1, [pc, #216]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
 800251a:	e008      	b.n	800252e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	2b80      	cmp	r3, #128	; 0x80
 8002520:	d105      	bne.n	800252e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002522:	4b33      	ldr	r3, [pc, #204]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	4a32      	ldr	r2, [pc, #200]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002528:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800252c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800252e:	4b2f      	ldr	r3, [pc, #188]	; (80025ec <HAL_RCC_ClockConfig+0x260>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d21d      	bcs.n	8002578 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253c:	4b2b      	ldr	r3, [pc, #172]	; (80025ec <HAL_RCC_ClockConfig+0x260>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 020f 	bic.w	r2, r3, #15
 8002544:	4929      	ldr	r1, [pc, #164]	; (80025ec <HAL_RCC_ClockConfig+0x260>)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800254c:	f7ff f860 	bl	8001610 <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002552:	e00a      	b.n	800256a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002554:	f7ff f85c 	bl	8001610 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e03b      	b.n	80025e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_RCC_ClockConfig+0x260>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d1ed      	bne.n	8002554 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002584:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4917      	ldr	r1, [pc, #92]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d009      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	490f      	ldr	r1, [pc, #60]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025b6:	f000 f825 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 80025ba:	4602      	mov	r2, r0
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	490c      	ldr	r1, [pc, #48]	; (80025f8 <HAL_RCC_ClockConfig+0x26c>)
 80025c8:	5ccb      	ldrb	r3, [r1, r3]
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	fa22 f303 	lsr.w	r3, r2, r3
 80025d2:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <HAL_RCC_ClockConfig+0x270>)
 80025d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_RCC_ClockConfig+0x274>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe ffcc 	bl	8001578 <HAL_InitTick>
 80025e0:	4603      	mov	r3, r0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40021000 	.word	0x40021000
 80025f4:	04c4b400 	.word	0x04c4b400
 80025f8:	08003cec 	.word	0x08003cec
 80025fc:	20000074 	.word	0x20000074
 8002600:	20000078 	.word	0x20000078

08002604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800260a:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b04      	cmp	r3, #4
 8002614:	d102      	bne.n	800261c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002616:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	e047      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800261c:	4b27      	ldr	r3, [pc, #156]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b08      	cmp	r3, #8
 8002626:	d102      	bne.n	800262e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002628:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	e03e      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b0c      	cmp	r3, #12
 8002638:	d136      	bne.n	80026a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800263a:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	3301      	adds	r3, #1
 8002650:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d10c      	bne.n	8002672 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002658:	4a1a      	ldr	r2, [pc, #104]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002660:	4a16      	ldr	r2, [pc, #88]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002662:	68d2      	ldr	r2, [r2, #12]
 8002664:	0a12      	lsrs	r2, r2, #8
 8002666:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	617b      	str	r3, [r7, #20]
      break;
 8002670:	e00c      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002672:	4a13      	ldr	r2, [pc, #76]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	fbb2 f3f3 	udiv	r3, r2, r3
 800267a:	4a10      	ldr	r2, [pc, #64]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800267c:	68d2      	ldr	r2, [r2, #12]
 800267e:	0a12      	lsrs	r2, r2, #8
 8002680:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002684:	fb02 f303 	mul.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
      break;
 800268a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0e5b      	lsrs	r3, r3, #25
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	3301      	adds	r3, #1
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	e001      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026ac:	693b      	ldr	r3, [r7, #16]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	00f42400 	.word	0x00f42400
 80026c4:	016e3600 	.word	0x016e3600

080026c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20000074 	.word	0x20000074

080026e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026e4:	f7ff fff0 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	4904      	ldr	r1, [pc, #16]	; (8002708 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002700:	4618      	mov	r0, r3
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000
 8002708:	08003cfc 	.word	0x08003cfc

0800270c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002710:	f7ff ffda 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 8002714:	4602      	mov	r2, r0
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	0adb      	lsrs	r3, r3, #11
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	4904      	ldr	r1, [pc, #16]	; (8002734 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40021000 	.word	0x40021000
 8002734:	08003cfc 	.word	0x08003cfc

08002738 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800273e:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	3301      	adds	r3, #1
 8002754:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d10c      	bne.n	8002776 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800275c:	4a17      	ldr	r2, [pc, #92]	; (80027bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002766:	68d2      	ldr	r2, [r2, #12]
 8002768:	0a12      	lsrs	r2, r2, #8
 800276a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800276e:	fb02 f303 	mul.w	r3, r2, r3
 8002772:	617b      	str	r3, [r7, #20]
    break;
 8002774:	e00c      	b.n	8002790 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002780:	68d2      	ldr	r2, [r2, #12]
 8002782:	0a12      	lsrs	r2, r2, #8
 8002784:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	617b      	str	r3, [r7, #20]
    break;
 800278e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	0e5b      	lsrs	r3, r3, #25
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	3301      	adds	r3, #1
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80027aa:	687b      	ldr	r3, [r7, #4]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40021000 	.word	0x40021000
 80027bc:	016e3600 	.word	0x016e3600
 80027c0:	00f42400 	.word	0x00f42400

080027c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027cc:	2300      	movs	r3, #0
 80027ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027d0:	2300      	movs	r3, #0
 80027d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8098 	beq.w	8002912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e2:	2300      	movs	r3, #0
 80027e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e6:	4b43      	ldr	r3, [pc, #268]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10d      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f2:	4b40      	ldr	r3, [pc, #256]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	4a3f      	ldr	r2, [pc, #252]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027fc:	6593      	str	r3, [r2, #88]	; 0x58
 80027fe:	4b3d      	ldr	r3, [pc, #244]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800280a:	2301      	movs	r3, #1
 800280c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800280e:	4b3a      	ldr	r3, [pc, #232]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a39      	ldr	r2, [pc, #228]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002818:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800281a:	f7fe fef9 	bl	8001610 <HAL_GetTick>
 800281e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002820:	e009      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002822:	f7fe fef5 	bl	8001610 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d902      	bls.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	74fb      	strb	r3, [r7, #19]
        break;
 8002834:	e005      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002836:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0ef      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002842:	7cfb      	ldrb	r3, [r7, #19]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d159      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002848:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002852:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d01e      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	429a      	cmp	r2, r3
 8002862:	d019      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002864:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800286e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002870:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	4a1f      	ldr	r2, [pc, #124]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002880:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002886:	4a1b      	ldr	r2, [pc, #108]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002890:	4a18      	ldr	r2, [pc, #96]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d016      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7fe feb5 	bl	8001610 <HAL_GetTick>
 80028a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a8:	e00b      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7fe feb1 	bl	8001610 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d902      	bls.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	74fb      	strb	r3, [r7, #19]
            break;
 80028c0:	e006      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0ec      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10b      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028d6:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e4:	4903      	ldr	r1, [pc, #12]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028ec:	e008      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028ee:	7cfb      	ldrb	r3, [r7, #19]
 80028f0:	74bb      	strb	r3, [r7, #18]
 80028f2:	e005      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002900:	7c7b      	ldrb	r3, [r7, #17]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d105      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002906:	4ba7      	ldr	r3, [pc, #668]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	4aa6      	ldr	r2, [pc, #664]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002910:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800291e:	4ba1      	ldr	r3, [pc, #644]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002924:	f023 0203 	bic.w	r2, r3, #3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	499d      	ldr	r1, [pc, #628]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00a      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002940:	4b98      	ldr	r3, [pc, #608]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002946:	f023 020c 	bic.w	r2, r3, #12
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	4995      	ldr	r1, [pc, #596]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002962:	4b90      	ldr	r3, [pc, #576]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002968:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	498c      	ldr	r1, [pc, #560]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002984:	4b87      	ldr	r3, [pc, #540]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	4984      	ldr	r1, [pc, #528]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029a6:	4b7f      	ldr	r3, [pc, #508]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	497b      	ldr	r1, [pc, #492]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029c8:	4b76      	ldr	r3, [pc, #472]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	4973      	ldr	r1, [pc, #460]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ea:	4b6e      	ldr	r3, [pc, #440]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	496a      	ldr	r1, [pc, #424]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a0c:	4b65      	ldr	r3, [pc, #404]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	4962      	ldr	r1, [pc, #392]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	4959      	ldr	r1, [pc, #356]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a50:	4b54      	ldr	r3, [pc, #336]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a56:	f023 0203 	bic.w	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	4951      	ldr	r1, [pc, #324]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a72:	4b4c      	ldr	r3, [pc, #304]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	4948      	ldr	r1, [pc, #288]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d015      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a94:	4b43      	ldr	r3, [pc, #268]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	4940      	ldr	r1, [pc, #256]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ab2:	d105      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab4:	4b3b      	ldr	r3, [pc, #236]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4a3a      	ldr	r2, [pc, #232]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002abe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d015      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002acc:	4b35      	ldr	r3, [pc, #212]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ada:	4932      	ldr	r1, [pc, #200]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aea:	d105      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aec:	4b2d      	ldr	r3, [pc, #180]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a2c      	ldr	r2, [pc, #176]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d015      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b04:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	4924      	ldr	r1, [pc, #144]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b22:	d105      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4a1e      	ldr	r2, [pc, #120]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d015      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b3c:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	4916      	ldr	r1, [pc, #88]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b5a:	d105      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a10      	ldr	r2, [pc, #64]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d019      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	4908      	ldr	r1, [pc, #32]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b92:	d109      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4a02      	ldr	r2, [pc, #8]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b9e:	60d3      	str	r3, [r2, #12]
 8002ba0:	e002      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d015      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bb4:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	4926      	ldr	r1, [pc, #152]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bd2:	d105      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bd4:	4b21      	ldr	r3, [pc, #132]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4a20      	ldr	r2, [pc, #128]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bde:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d015      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bfa:	4918      	ldr	r1, [pc, #96]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0a:	d105      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c0c:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	4a12      	ldr	r2, [pc, #72]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c16:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d015      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c24:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	490a      	ldr	r1, [pc, #40]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c42:	d105      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c4e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c50:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000

08002c60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e042      	b.n	8002cf8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d106      	bne.n	8002c8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7fe fb99 	bl	80013bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2224      	movs	r2, #36	; 0x24
 8002c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f82c 	bl	8002d00 <UART_SetConfig>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e022      	b.n	8002cf8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fb1c 	bl	80032f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fba3 	bl	800343c <UART_CheckIdleState>
 8002cf6:	4603      	mov	r3, r0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d04:	b08c      	sub	sp, #48	; 0x30
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	4baa      	ldr	r3, [pc, #680]	; (8002fd8 <UART_SetConfig+0x2d8>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a9f      	ldr	r2, [pc, #636]	; (8002fdc <UART_SetConfig+0x2dc>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d004      	beq.n	8002d6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002d76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d80:	430b      	orrs	r3, r1
 8002d82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	f023 010f 	bic.w	r1, r3, #15
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a90      	ldr	r2, [pc, #576]	; (8002fe0 <UART_SetConfig+0x2e0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d125      	bne.n	8002df0 <UART_SetConfig+0xf0>
 8002da4:	4b8f      	ldr	r3, [pc, #572]	; (8002fe4 <UART_SetConfig+0x2e4>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d81a      	bhi.n	8002de8 <UART_SetConfig+0xe8>
 8002db2:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <UART_SetConfig+0xb8>)
 8002db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db8:	08002dc9 	.word	0x08002dc9
 8002dbc:	08002dd9 	.word	0x08002dd9
 8002dc0:	08002dd1 	.word	0x08002dd1
 8002dc4:	08002de1 	.word	0x08002de1
 8002dc8:	2301      	movs	r3, #1
 8002dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dce:	e116      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dd6:	e112      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002dd8:	2304      	movs	r3, #4
 8002dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dde:	e10e      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002de0:	2308      	movs	r3, #8
 8002de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002de6:	e10a      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002de8:	2310      	movs	r3, #16
 8002dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dee:	e106      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a7c      	ldr	r2, [pc, #496]	; (8002fe8 <UART_SetConfig+0x2e8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d138      	bne.n	8002e6c <UART_SetConfig+0x16c>
 8002dfa:	4b7a      	ldr	r3, [pc, #488]	; (8002fe4 <UART_SetConfig+0x2e4>)
 8002dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b0c      	cmp	r3, #12
 8002e06:	d82d      	bhi.n	8002e64 <UART_SetConfig+0x164>
 8002e08:	a201      	add	r2, pc, #4	; (adr r2, 8002e10 <UART_SetConfig+0x110>)
 8002e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0e:	bf00      	nop
 8002e10:	08002e45 	.word	0x08002e45
 8002e14:	08002e65 	.word	0x08002e65
 8002e18:	08002e65 	.word	0x08002e65
 8002e1c:	08002e65 	.word	0x08002e65
 8002e20:	08002e55 	.word	0x08002e55
 8002e24:	08002e65 	.word	0x08002e65
 8002e28:	08002e65 	.word	0x08002e65
 8002e2c:	08002e65 	.word	0x08002e65
 8002e30:	08002e4d 	.word	0x08002e4d
 8002e34:	08002e65 	.word	0x08002e65
 8002e38:	08002e65 	.word	0x08002e65
 8002e3c:	08002e65 	.word	0x08002e65
 8002e40:	08002e5d 	.word	0x08002e5d
 8002e44:	2300      	movs	r3, #0
 8002e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e4a:	e0d8      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e52:	e0d4      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002e54:	2304      	movs	r3, #4
 8002e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e5a:	e0d0      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e62:	e0cc      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002e64:	2310      	movs	r3, #16
 8002e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e6a:	e0c8      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a5e      	ldr	r2, [pc, #376]	; (8002fec <UART_SetConfig+0x2ec>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d125      	bne.n	8002ec2 <UART_SetConfig+0x1c2>
 8002e76:	4b5b      	ldr	r3, [pc, #364]	; (8002fe4 <UART_SetConfig+0x2e4>)
 8002e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e80:	2b30      	cmp	r3, #48	; 0x30
 8002e82:	d016      	beq.n	8002eb2 <UART_SetConfig+0x1b2>
 8002e84:	2b30      	cmp	r3, #48	; 0x30
 8002e86:	d818      	bhi.n	8002eba <UART_SetConfig+0x1ba>
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d00a      	beq.n	8002ea2 <UART_SetConfig+0x1a2>
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d814      	bhi.n	8002eba <UART_SetConfig+0x1ba>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <UART_SetConfig+0x19a>
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d008      	beq.n	8002eaa <UART_SetConfig+0x1aa>
 8002e98:	e00f      	b.n	8002eba <UART_SetConfig+0x1ba>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ea0:	e0ad      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ea8:	e0a9      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002eaa:	2304      	movs	r3, #4
 8002eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eb0:	e0a5      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002eb2:	2308      	movs	r3, #8
 8002eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eb8:	e0a1      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002eba:	2310      	movs	r3, #16
 8002ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ec0:	e09d      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a4a      	ldr	r2, [pc, #296]	; (8002ff0 <UART_SetConfig+0x2f0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d125      	bne.n	8002f18 <UART_SetConfig+0x218>
 8002ecc:	4b45      	ldr	r3, [pc, #276]	; (8002fe4 <UART_SetConfig+0x2e4>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ed6:	2bc0      	cmp	r3, #192	; 0xc0
 8002ed8:	d016      	beq.n	8002f08 <UART_SetConfig+0x208>
 8002eda:	2bc0      	cmp	r3, #192	; 0xc0
 8002edc:	d818      	bhi.n	8002f10 <UART_SetConfig+0x210>
 8002ede:	2b80      	cmp	r3, #128	; 0x80
 8002ee0:	d00a      	beq.n	8002ef8 <UART_SetConfig+0x1f8>
 8002ee2:	2b80      	cmp	r3, #128	; 0x80
 8002ee4:	d814      	bhi.n	8002f10 <UART_SetConfig+0x210>
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <UART_SetConfig+0x1f0>
 8002eea:	2b40      	cmp	r3, #64	; 0x40
 8002eec:	d008      	beq.n	8002f00 <UART_SetConfig+0x200>
 8002eee:	e00f      	b.n	8002f10 <UART_SetConfig+0x210>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ef6:	e082      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002efe:	e07e      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002f00:	2304      	movs	r3, #4
 8002f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f06:	e07a      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002f08:	2308      	movs	r3, #8
 8002f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f0e:	e076      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002f10:	2310      	movs	r3, #16
 8002f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f16:	e072      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a35      	ldr	r2, [pc, #212]	; (8002ff4 <UART_SetConfig+0x2f4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d12a      	bne.n	8002f78 <UART_SetConfig+0x278>
 8002f22:	4b30      	ldr	r3, [pc, #192]	; (8002fe4 <UART_SetConfig+0x2e4>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f30:	d01a      	beq.n	8002f68 <UART_SetConfig+0x268>
 8002f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f36:	d81b      	bhi.n	8002f70 <UART_SetConfig+0x270>
 8002f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f3c:	d00c      	beq.n	8002f58 <UART_SetConfig+0x258>
 8002f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f42:	d815      	bhi.n	8002f70 <UART_SetConfig+0x270>
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <UART_SetConfig+0x250>
 8002f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f4c:	d008      	beq.n	8002f60 <UART_SetConfig+0x260>
 8002f4e:	e00f      	b.n	8002f70 <UART_SetConfig+0x270>
 8002f50:	2300      	movs	r3, #0
 8002f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f56:	e052      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f5e:	e04e      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002f60:	2304      	movs	r3, #4
 8002f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f66:	e04a      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002f68:	2308      	movs	r3, #8
 8002f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f6e:	e046      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002f70:	2310      	movs	r3, #16
 8002f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f76:	e042      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a17      	ldr	r2, [pc, #92]	; (8002fdc <UART_SetConfig+0x2dc>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d13a      	bne.n	8002ff8 <UART_SetConfig+0x2f8>
 8002f82:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <UART_SetConfig+0x2e4>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f90:	d01a      	beq.n	8002fc8 <UART_SetConfig+0x2c8>
 8002f92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f96:	d81b      	bhi.n	8002fd0 <UART_SetConfig+0x2d0>
 8002f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f9c:	d00c      	beq.n	8002fb8 <UART_SetConfig+0x2b8>
 8002f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fa2:	d815      	bhi.n	8002fd0 <UART_SetConfig+0x2d0>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <UART_SetConfig+0x2b0>
 8002fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fac:	d008      	beq.n	8002fc0 <UART_SetConfig+0x2c0>
 8002fae:	e00f      	b.n	8002fd0 <UART_SetConfig+0x2d0>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fb6:	e022      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fbe:	e01e      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fc6:	e01a      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fce:	e016      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002fd0:	2310      	movs	r3, #16
 8002fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fd6:	e012      	b.n	8002ffe <UART_SetConfig+0x2fe>
 8002fd8:	cfff69f3 	.word	0xcfff69f3
 8002fdc:	40008000 	.word	0x40008000
 8002fe0:	40013800 	.word	0x40013800
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40004400 	.word	0x40004400
 8002fec:	40004800 	.word	0x40004800
 8002ff0:	40004c00 	.word	0x40004c00
 8002ff4:	40005000 	.word	0x40005000
 8002ff8:	2310      	movs	r3, #16
 8002ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4aae      	ldr	r2, [pc, #696]	; (80032bc <UART_SetConfig+0x5bc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	f040 8097 	bne.w	8003138 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800300a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800300e:	2b08      	cmp	r3, #8
 8003010:	d823      	bhi.n	800305a <UART_SetConfig+0x35a>
 8003012:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <UART_SetConfig+0x318>)
 8003014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003018:	0800303d 	.word	0x0800303d
 800301c:	0800305b 	.word	0x0800305b
 8003020:	08003045 	.word	0x08003045
 8003024:	0800305b 	.word	0x0800305b
 8003028:	0800304b 	.word	0x0800304b
 800302c:	0800305b 	.word	0x0800305b
 8003030:	0800305b 	.word	0x0800305b
 8003034:	0800305b 	.word	0x0800305b
 8003038:	08003053 	.word	0x08003053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800303c:	f7ff fb50 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 8003040:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003042:	e010      	b.n	8003066 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003044:	4b9e      	ldr	r3, [pc, #632]	; (80032c0 <UART_SetConfig+0x5c0>)
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003048:	e00d      	b.n	8003066 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800304a:	f7ff fadb 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 800304e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003050:	e009      	b.n	8003066 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003058:	e005      	b.n	8003066 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003064:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 8130 	beq.w	80032ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	4a94      	ldr	r2, [pc, #592]	; (80032c4 <UART_SetConfig+0x5c4>)
 8003074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003078:	461a      	mov	r2, r3
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003080:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4413      	add	r3, r2
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	429a      	cmp	r2, r3
 8003090:	d305      	bcc.n	800309e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	429a      	cmp	r2, r3
 800309c:	d903      	bls.n	80030a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80030a4:	e113      	b.n	80032ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	2200      	movs	r2, #0
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	60fa      	str	r2, [r7, #12]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	4a84      	ldr	r2, [pc, #528]	; (80032c4 <UART_SetConfig+0x5c4>)
 80030b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2200      	movs	r2, #0
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030c8:	f7fd fd3a 	bl	8000b40 <__aeabi_uldivmod>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4610      	mov	r0, r2
 80030d2:	4619      	mov	r1, r3
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	020b      	lsls	r3, r1, #8
 80030de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030e2:	0202      	lsls	r2, r0, #8
 80030e4:	6979      	ldr	r1, [r7, #20]
 80030e6:	6849      	ldr	r1, [r1, #4]
 80030e8:	0849      	lsrs	r1, r1, #1
 80030ea:	2000      	movs	r0, #0
 80030ec:	460c      	mov	r4, r1
 80030ee:	4605      	mov	r5, r0
 80030f0:	eb12 0804 	adds.w	r8, r2, r4
 80030f4:	eb43 0905 	adc.w	r9, r3, r5
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	469a      	mov	sl, r3
 8003100:	4693      	mov	fp, r2
 8003102:	4652      	mov	r2, sl
 8003104:	465b      	mov	r3, fp
 8003106:	4640      	mov	r0, r8
 8003108:	4649      	mov	r1, r9
 800310a:	f7fd fd19 	bl	8000b40 <__aeabi_uldivmod>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4613      	mov	r3, r2
 8003114:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800311c:	d308      	bcc.n	8003130 <UART_SetConfig+0x430>
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003124:	d204      	bcs.n	8003130 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6a3a      	ldr	r2, [r7, #32]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	e0ce      	b.n	80032ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003136:	e0ca      	b.n	80032ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003140:	d166      	bne.n	8003210 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003142:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003146:	2b08      	cmp	r3, #8
 8003148:	d827      	bhi.n	800319a <UART_SetConfig+0x49a>
 800314a:	a201      	add	r2, pc, #4	; (adr r2, 8003150 <UART_SetConfig+0x450>)
 800314c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003150:	08003175 	.word	0x08003175
 8003154:	0800317d 	.word	0x0800317d
 8003158:	08003185 	.word	0x08003185
 800315c:	0800319b 	.word	0x0800319b
 8003160:	0800318b 	.word	0x0800318b
 8003164:	0800319b 	.word	0x0800319b
 8003168:	0800319b 	.word	0x0800319b
 800316c:	0800319b 	.word	0x0800319b
 8003170:	08003193 	.word	0x08003193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003174:	f7ff fab4 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 8003178:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800317a:	e014      	b.n	80031a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800317c:	f7ff fac6 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 8003180:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003182:	e010      	b.n	80031a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003184:	4b4e      	ldr	r3, [pc, #312]	; (80032c0 <UART_SetConfig+0x5c0>)
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003188:	e00d      	b.n	80031a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800318a:	f7ff fa3b 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 800318e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003190:	e009      	b.n	80031a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003198:	e005      	b.n	80031a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80031a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8090 	beq.w	80032ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	4a44      	ldr	r2, [pc, #272]	; (80032c4 <UART_SetConfig+0x5c4>)
 80031b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031b8:	461a      	mov	r2, r3
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80031c0:	005a      	lsls	r2, r3, #1
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	441a      	add	r2, r3
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	2b0f      	cmp	r3, #15
 80031d8:	d916      	bls.n	8003208 <UART_SetConfig+0x508>
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e0:	d212      	bcs.n	8003208 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f023 030f 	bic.w	r3, r3, #15
 80031ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	085b      	lsrs	r3, r3, #1
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	8bfb      	ldrh	r3, [r7, #30]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	8bfa      	ldrh	r2, [r7, #30]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	e062      	b.n	80032ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800320e:	e05e      	b.n	80032ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003210:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003214:	2b08      	cmp	r3, #8
 8003216:	d828      	bhi.n	800326a <UART_SetConfig+0x56a>
 8003218:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <UART_SetConfig+0x520>)
 800321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321e:	bf00      	nop
 8003220:	08003245 	.word	0x08003245
 8003224:	0800324d 	.word	0x0800324d
 8003228:	08003255 	.word	0x08003255
 800322c:	0800326b 	.word	0x0800326b
 8003230:	0800325b 	.word	0x0800325b
 8003234:	0800326b 	.word	0x0800326b
 8003238:	0800326b 	.word	0x0800326b
 800323c:	0800326b 	.word	0x0800326b
 8003240:	08003263 	.word	0x08003263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003244:	f7ff fa4c 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 8003248:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800324a:	e014      	b.n	8003276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800324c:	f7ff fa5e 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 8003250:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003252:	e010      	b.n	8003276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003254:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <UART_SetConfig+0x5c0>)
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003258:	e00d      	b.n	8003276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800325a:	f7ff f9d3 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 800325e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003260:	e009      	b.n	8003276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003268:	e005      	b.n	8003276 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003274:	bf00      	nop
    }

    if (pclk != 0U)
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	2b00      	cmp	r3, #0
 800327a:	d028      	beq.n	80032ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	4a10      	ldr	r2, [pc, #64]	; (80032c4 <UART_SetConfig+0x5c4>)
 8003282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003286:	461a      	mov	r2, r3
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	fbb3 f2f2 	udiv	r2, r3, r2
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	085b      	lsrs	r3, r3, #1
 8003294:	441a      	add	r2, r3
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	fbb2 f3f3 	udiv	r3, r2, r3
 800329e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	2b0f      	cmp	r3, #15
 80032a4:	d910      	bls.n	80032c8 <UART_SetConfig+0x5c8>
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ac:	d20c      	bcs.n	80032c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	60da      	str	r2, [r3, #12]
 80032b8:	e009      	b.n	80032ce <UART_SetConfig+0x5ce>
 80032ba:	bf00      	nop
 80032bc:	40008000 	.word	0x40008000
 80032c0:	00f42400 	.word	0x00f42400
 80032c4:	08003d04 	.word	0x08003d04
      }
      else
      {
        ret = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2201      	movs	r2, #1
 80032da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2200      	movs	r2, #0
 80032e2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2200      	movs	r2, #0
 80032e8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80032ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3730      	adds	r7, #48	; 0x30
 80032f2:	46bd      	mov	sp, r7
 80032f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080032f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01a      	beq.n	800340e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033f6:	d10a      	bne.n	800340e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	605a      	str	r2, [r3, #4]
  }
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af02      	add	r7, sp, #8
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800344c:	f7fe f8e0 	bl	8001610 <HAL_GetTick>
 8003450:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b08      	cmp	r3, #8
 800345e:	d10e      	bne.n	800347e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f82f 	bl	80034d2 <UART_WaitOnFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e025      	b.n	80034ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b04      	cmp	r3, #4
 800348a:	d10e      	bne.n	80034aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800348c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f819 	bl	80034d2 <UART_WaitOnFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e00f      	b.n	80034ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b09c      	sub	sp, #112	; 0x70
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	603b      	str	r3, [r7, #0]
 80034de:	4613      	mov	r3, r2
 80034e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e2:	e0a9      	b.n	8003638 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ea:	f000 80a5 	beq.w	8003638 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ee:	f7fe f88f 	bl	8001610 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d302      	bcc.n	8003504 <UART_WaitOnFlagUntilTimeout+0x32>
 80034fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003500:	2b00      	cmp	r3, #0
 8003502:	d140      	bne.n	8003586 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800350c:	e853 3f00 	ldrex	r3, [r3]
 8003510:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003514:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003518:	667b      	str	r3, [r7, #100]	; 0x64
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003522:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003524:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003526:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003528:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800352a:	e841 2300 	strex	r3, r2, [r1]
 800352e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1e6      	bne.n	8003504 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3308      	adds	r3, #8
 800353c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	663b      	str	r3, [r7, #96]	; 0x60
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3308      	adds	r3, #8
 8003554:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003556:	64ba      	str	r2, [r7, #72]	; 0x48
 8003558:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800355c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800355e:	e841 2300 	strex	r3, r2, [r1]
 8003562:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e5      	bne.n	8003536 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e069      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d051      	beq.n	8003638 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800359e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035a2:	d149      	bne.n	8003638 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	e853 3f00 	ldrex	r3, [r3]
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035cc:	637b      	str	r3, [r7, #52]	; 0x34
 80035ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035d4:	e841 2300 	strex	r3, r2, [r1]
 80035d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e6      	bne.n	80035ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3308      	adds	r3, #8
 80035e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	e853 3f00 	ldrex	r3, [r3]
 80035ee:	613b      	str	r3, [r7, #16]
   return(result);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f023 0301 	bic.w	r3, r3, #1
 80035f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3308      	adds	r3, #8
 80035fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003600:	623a      	str	r2, [r7, #32]
 8003602:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003604:	69f9      	ldr	r1, [r7, #28]
 8003606:	6a3a      	ldr	r2, [r7, #32]
 8003608:	e841 2300 	strex	r3, r2, [r1]
 800360c:	61bb      	str	r3, [r7, #24]
   return(result);
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1e5      	bne.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e010      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69da      	ldr	r2, [r3, #28]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4013      	ands	r3, r2
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	429a      	cmp	r2, r3
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	429a      	cmp	r2, r3
 8003654:	f43f af46 	beq.w	80034e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3770      	adds	r7, #112	; 0x70
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003662:	b480      	push	{r7}
 8003664:	b085      	sub	sp, #20
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_UARTEx_DisableFifoMode+0x16>
 8003674:	2302      	movs	r3, #2
 8003676:	e027      	b.n	80036c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2224      	movs	r2, #36	; 0x24
 8003684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0201 	bic.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80036a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e02d      	b.n	8003748 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2224      	movs	r2, #36	; 0x24
 80036f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0201 	bic.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f84f 	bl	80037cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003764:	2302      	movs	r3, #2
 8003766:	e02d      	b.n	80037c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2224      	movs	r2, #36	; 0x24
 8003774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f811 	bl	80037cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d108      	bne.n	80037ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80037ec:	e031      	b.n	8003852 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80037ee:	2308      	movs	r3, #8
 80037f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80037f2:	2308      	movs	r3, #8
 80037f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	0e5b      	lsrs	r3, r3, #25
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	0f5b      	lsrs	r3, r3, #29
 800380e:	b2db      	uxtb	r3, r3
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003816:	7bbb      	ldrb	r3, [r7, #14]
 8003818:	7b3a      	ldrb	r2, [r7, #12]
 800381a:	4911      	ldr	r1, [pc, #68]	; (8003860 <UARTEx_SetNbDataToProcess+0x94>)
 800381c:	5c8a      	ldrb	r2, [r1, r2]
 800381e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003822:	7b3a      	ldrb	r2, [r7, #12]
 8003824:	490f      	ldr	r1, [pc, #60]	; (8003864 <UARTEx_SetNbDataToProcess+0x98>)
 8003826:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003828:	fb93 f3f2 	sdiv	r3, r3, r2
 800382c:	b29a      	uxth	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	7b7a      	ldrb	r2, [r7, #13]
 8003838:	4909      	ldr	r1, [pc, #36]	; (8003860 <UARTEx_SetNbDataToProcess+0x94>)
 800383a:	5c8a      	ldrb	r2, [r1, r2]
 800383c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003840:	7b7a      	ldrb	r2, [r7, #13]
 8003842:	4908      	ldr	r1, [pc, #32]	; (8003864 <UARTEx_SetNbDataToProcess+0x98>)
 8003844:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003846:	fb93 f3f2 	sdiv	r3, r3, r2
 800384a:	b29a      	uxth	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003852:	bf00      	nop
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	08003d1c 	.word	0x08003d1c
 8003864:	08003d24 	.word	0x08003d24

08003868 <memset>:
 8003868:	4402      	add	r2, r0
 800386a:	4603      	mov	r3, r0
 800386c:	4293      	cmp	r3, r2
 800386e:	d100      	bne.n	8003872 <memset+0xa>
 8003870:	4770      	bx	lr
 8003872:	f803 1b01 	strb.w	r1, [r3], #1
 8003876:	e7f9      	b.n	800386c <memset+0x4>

08003878 <__errno>:
 8003878:	4b01      	ldr	r3, [pc, #4]	; (8003880 <__errno+0x8>)
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	200000cc 	.word	0x200000cc

08003884 <__libc_init_array>:
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	4d0d      	ldr	r5, [pc, #52]	; (80038bc <__libc_init_array+0x38>)
 8003888:	4c0d      	ldr	r4, [pc, #52]	; (80038c0 <__libc_init_array+0x3c>)
 800388a:	1b64      	subs	r4, r4, r5
 800388c:	10a4      	asrs	r4, r4, #2
 800388e:	2600      	movs	r6, #0
 8003890:	42a6      	cmp	r6, r4
 8003892:	d109      	bne.n	80038a8 <__libc_init_array+0x24>
 8003894:	4d0b      	ldr	r5, [pc, #44]	; (80038c4 <__libc_init_array+0x40>)
 8003896:	4c0c      	ldr	r4, [pc, #48]	; (80038c8 <__libc_init_array+0x44>)
 8003898:	f000 fa1c 	bl	8003cd4 <_init>
 800389c:	1b64      	subs	r4, r4, r5
 800389e:	10a4      	asrs	r4, r4, #2
 80038a0:	2600      	movs	r6, #0
 80038a2:	42a6      	cmp	r6, r4
 80038a4:	d105      	bne.n	80038b2 <__libc_init_array+0x2e>
 80038a6:	bd70      	pop	{r4, r5, r6, pc}
 80038a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ac:	4798      	blx	r3
 80038ae:	3601      	adds	r6, #1
 80038b0:	e7ee      	b.n	8003890 <__libc_init_array+0xc>
 80038b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b6:	4798      	blx	r3
 80038b8:	3601      	adds	r6, #1
 80038ba:	e7f2      	b.n	80038a2 <__libc_init_array+0x1e>
 80038bc:	08003d38 	.word	0x08003d38
 80038c0:	08003d38 	.word	0x08003d38
 80038c4:	08003d38 	.word	0x08003d38
 80038c8:	08003d3c 	.word	0x08003d3c
 80038cc:	00000000 	.word	0x00000000

080038d0 <log>:
 80038d0:	b538      	push	{r3, r4, r5, lr}
 80038d2:	ed2d 8b02 	vpush	{d8}
 80038d6:	ec55 4b10 	vmov	r4, r5, d0
 80038da:	f000 f841 	bl	8003960 <__ieee754_log>
 80038de:	4622      	mov	r2, r4
 80038e0:	462b      	mov	r3, r5
 80038e2:	4620      	mov	r0, r4
 80038e4:	4629      	mov	r1, r5
 80038e6:	eeb0 8a40 	vmov.f32	s16, s0
 80038ea:	eef0 8a60 	vmov.f32	s17, s1
 80038ee:	f7fd f8e9 	bl	8000ac4 <__aeabi_dcmpun>
 80038f2:	b998      	cbnz	r0, 800391c <log+0x4c>
 80038f4:	2200      	movs	r2, #0
 80038f6:	2300      	movs	r3, #0
 80038f8:	4620      	mov	r0, r4
 80038fa:	4629      	mov	r1, r5
 80038fc:	f7fd f8d8 	bl	8000ab0 <__aeabi_dcmpgt>
 8003900:	b960      	cbnz	r0, 800391c <log+0x4c>
 8003902:	2200      	movs	r2, #0
 8003904:	2300      	movs	r3, #0
 8003906:	4620      	mov	r0, r4
 8003908:	4629      	mov	r1, r5
 800390a:	f7fd f8a9 	bl	8000a60 <__aeabi_dcmpeq>
 800390e:	b160      	cbz	r0, 800392a <log+0x5a>
 8003910:	f7ff ffb2 	bl	8003878 <__errno>
 8003914:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8003940 <log+0x70>
 8003918:	2322      	movs	r3, #34	; 0x22
 800391a:	6003      	str	r3, [r0, #0]
 800391c:	eeb0 0a48 	vmov.f32	s0, s16
 8003920:	eef0 0a68 	vmov.f32	s1, s17
 8003924:	ecbd 8b02 	vpop	{d8}
 8003928:	bd38      	pop	{r3, r4, r5, pc}
 800392a:	f7ff ffa5 	bl	8003878 <__errno>
 800392e:	ecbd 8b02 	vpop	{d8}
 8003932:	2321      	movs	r3, #33	; 0x21
 8003934:	6003      	str	r3, [r0, #0]
 8003936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800393a:	4803      	ldr	r0, [pc, #12]	; (8003948 <log+0x78>)
 800393c:	f000 b808 	b.w	8003950 <nan>
 8003940:	00000000 	.word	0x00000000
 8003944:	fff00000 	.word	0xfff00000
 8003948:	08003d2c 	.word	0x08003d2c
 800394c:	00000000 	.word	0x00000000

08003950 <nan>:
 8003950:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8003958 <nan+0x8>
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	00000000 	.word	0x00000000
 800395c:	7ff80000 	.word	0x7ff80000

08003960 <__ieee754_log>:
 8003960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003964:	ec51 0b10 	vmov	r0, r1, d0
 8003968:	ed2d 8b04 	vpush	{d8-d9}
 800396c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003970:	b083      	sub	sp, #12
 8003972:	460d      	mov	r5, r1
 8003974:	da29      	bge.n	80039ca <__ieee754_log+0x6a>
 8003976:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800397a:	4303      	orrs	r3, r0
 800397c:	ee10 2a10 	vmov	r2, s0
 8003980:	d10c      	bne.n	800399c <__ieee754_log+0x3c>
 8003982:	49cf      	ldr	r1, [pc, #828]	; (8003cc0 <__ieee754_log+0x360>)
 8003984:	2200      	movs	r2, #0
 8003986:	2300      	movs	r3, #0
 8003988:	2000      	movs	r0, #0
 800398a:	f7fc ff2b 	bl	80007e4 <__aeabi_ddiv>
 800398e:	ec41 0b10 	vmov	d0, r0, r1
 8003992:	b003      	add	sp, #12
 8003994:	ecbd 8b04 	vpop	{d8-d9}
 8003998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800399c:	2900      	cmp	r1, #0
 800399e:	da05      	bge.n	80039ac <__ieee754_log+0x4c>
 80039a0:	460b      	mov	r3, r1
 80039a2:	f7fc fc3d 	bl	8000220 <__aeabi_dsub>
 80039a6:	2200      	movs	r2, #0
 80039a8:	2300      	movs	r3, #0
 80039aa:	e7ee      	b.n	800398a <__ieee754_log+0x2a>
 80039ac:	4bc5      	ldr	r3, [pc, #788]	; (8003cc4 <__ieee754_log+0x364>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	f7fc fdee 	bl	8000590 <__aeabi_dmul>
 80039b4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80039b8:	460d      	mov	r5, r1
 80039ba:	4ac3      	ldr	r2, [pc, #780]	; (8003cc8 <__ieee754_log+0x368>)
 80039bc:	4295      	cmp	r5, r2
 80039be:	dd06      	ble.n	80039ce <__ieee754_log+0x6e>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	f7fc fc2e 	bl	8000224 <__adddf3>
 80039c8:	e7e1      	b.n	800398e <__ieee754_log+0x2e>
 80039ca:	2300      	movs	r3, #0
 80039cc:	e7f5      	b.n	80039ba <__ieee754_log+0x5a>
 80039ce:	152c      	asrs	r4, r5, #20
 80039d0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80039d4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80039d8:	441c      	add	r4, r3
 80039da:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80039de:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80039e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80039ea:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80039ee:	ea42 0105 	orr.w	r1, r2, r5
 80039f2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80039f6:	2200      	movs	r2, #0
 80039f8:	4bb4      	ldr	r3, [pc, #720]	; (8003ccc <__ieee754_log+0x36c>)
 80039fa:	f7fc fc11 	bl	8000220 <__aeabi_dsub>
 80039fe:	1cab      	adds	r3, r5, #2
 8003a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	4682      	mov	sl, r0
 8003a08:	468b      	mov	fp, r1
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	dc53      	bgt.n	8003ab8 <__ieee754_log+0x158>
 8003a10:	2300      	movs	r3, #0
 8003a12:	f7fd f825 	bl	8000a60 <__aeabi_dcmpeq>
 8003a16:	b1d0      	cbz	r0, 8003a4e <__ieee754_log+0xee>
 8003a18:	2c00      	cmp	r4, #0
 8003a1a:	f000 8122 	beq.w	8003c62 <__ieee754_log+0x302>
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f7fc fd4c 	bl	80004bc <__aeabi_i2d>
 8003a24:	a390      	add	r3, pc, #576	; (adr r3, 8003c68 <__ieee754_log+0x308>)
 8003a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2a:	4606      	mov	r6, r0
 8003a2c:	460f      	mov	r7, r1
 8003a2e:	f7fc fdaf 	bl	8000590 <__aeabi_dmul>
 8003a32:	a38f      	add	r3, pc, #572	; (adr r3, 8003c70 <__ieee754_log+0x310>)
 8003a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a38:	4604      	mov	r4, r0
 8003a3a:	460d      	mov	r5, r1
 8003a3c:	4630      	mov	r0, r6
 8003a3e:	4639      	mov	r1, r7
 8003a40:	f7fc fda6 	bl	8000590 <__aeabi_dmul>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4620      	mov	r0, r4
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	e7ba      	b.n	80039c4 <__ieee754_log+0x64>
 8003a4e:	a38a      	add	r3, pc, #552	; (adr r3, 8003c78 <__ieee754_log+0x318>)
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	4650      	mov	r0, sl
 8003a56:	4659      	mov	r1, fp
 8003a58:	f7fc fd9a 	bl	8000590 <__aeabi_dmul>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	2000      	movs	r0, #0
 8003a62:	499b      	ldr	r1, [pc, #620]	; (8003cd0 <__ieee754_log+0x370>)
 8003a64:	f7fc fbdc 	bl	8000220 <__aeabi_dsub>
 8003a68:	4652      	mov	r2, sl
 8003a6a:	4606      	mov	r6, r0
 8003a6c:	460f      	mov	r7, r1
 8003a6e:	465b      	mov	r3, fp
 8003a70:	4650      	mov	r0, sl
 8003a72:	4659      	mov	r1, fp
 8003a74:	f7fc fd8c 	bl	8000590 <__aeabi_dmul>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	4639      	mov	r1, r7
 8003a80:	f7fc fd86 	bl	8000590 <__aeabi_dmul>
 8003a84:	4606      	mov	r6, r0
 8003a86:	460f      	mov	r7, r1
 8003a88:	b914      	cbnz	r4, 8003a90 <__ieee754_log+0x130>
 8003a8a:	4632      	mov	r2, r6
 8003a8c:	463b      	mov	r3, r7
 8003a8e:	e0a2      	b.n	8003bd6 <__ieee754_log+0x276>
 8003a90:	4620      	mov	r0, r4
 8003a92:	f7fc fd13 	bl	80004bc <__aeabi_i2d>
 8003a96:	a374      	add	r3, pc, #464	; (adr r3, 8003c68 <__ieee754_log+0x308>)
 8003a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9c:	4680      	mov	r8, r0
 8003a9e:	4689      	mov	r9, r1
 8003aa0:	f7fc fd76 	bl	8000590 <__aeabi_dmul>
 8003aa4:	a372      	add	r3, pc, #456	; (adr r3, 8003c70 <__ieee754_log+0x310>)
 8003aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aaa:	4604      	mov	r4, r0
 8003aac:	460d      	mov	r5, r1
 8003aae:	4640      	mov	r0, r8
 8003ab0:	4649      	mov	r1, r9
 8003ab2:	f7fc fd6d 	bl	8000590 <__aeabi_dmul>
 8003ab6:	e0a7      	b.n	8003c08 <__ieee754_log+0x2a8>
 8003ab8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003abc:	f7fc fbb2 	bl	8000224 <__adddf3>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4650      	mov	r0, sl
 8003ac6:	4659      	mov	r1, fp
 8003ac8:	f7fc fe8c 	bl	80007e4 <__aeabi_ddiv>
 8003acc:	ec41 0b18 	vmov	d8, r0, r1
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	f7fc fcf3 	bl	80004bc <__aeabi_i2d>
 8003ad6:	ec53 2b18 	vmov	r2, r3, d8
 8003ada:	ec41 0b19 	vmov	d9, r0, r1
 8003ade:	ec51 0b18 	vmov	r0, r1, d8
 8003ae2:	f7fc fd55 	bl	8000590 <__aeabi_dmul>
 8003ae6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8003aea:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8003aee:	9301      	str	r3, [sp, #4]
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4680      	mov	r8, r0
 8003af6:	4689      	mov	r9, r1
 8003af8:	f7fc fd4a 	bl	8000590 <__aeabi_dmul>
 8003afc:	a360      	add	r3, pc, #384	; (adr r3, 8003c80 <__ieee754_log+0x320>)
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	4606      	mov	r6, r0
 8003b04:	460f      	mov	r7, r1
 8003b06:	f7fc fd43 	bl	8000590 <__aeabi_dmul>
 8003b0a:	a35f      	add	r3, pc, #380	; (adr r3, 8003c88 <__ieee754_log+0x328>)
 8003b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b10:	f7fc fb88 	bl	8000224 <__adddf3>
 8003b14:	4632      	mov	r2, r6
 8003b16:	463b      	mov	r3, r7
 8003b18:	f7fc fd3a 	bl	8000590 <__aeabi_dmul>
 8003b1c:	a35c      	add	r3, pc, #368	; (adr r3, 8003c90 <__ieee754_log+0x330>)
 8003b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b22:	f7fc fb7f 	bl	8000224 <__adddf3>
 8003b26:	4632      	mov	r2, r6
 8003b28:	463b      	mov	r3, r7
 8003b2a:	f7fc fd31 	bl	8000590 <__aeabi_dmul>
 8003b2e:	a35a      	add	r3, pc, #360	; (adr r3, 8003c98 <__ieee754_log+0x338>)
 8003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b34:	f7fc fb76 	bl	8000224 <__adddf3>
 8003b38:	4642      	mov	r2, r8
 8003b3a:	464b      	mov	r3, r9
 8003b3c:	f7fc fd28 	bl	8000590 <__aeabi_dmul>
 8003b40:	a357      	add	r3, pc, #348	; (adr r3, 8003ca0 <__ieee754_log+0x340>)
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	4680      	mov	r8, r0
 8003b48:	4689      	mov	r9, r1
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	4639      	mov	r1, r7
 8003b4e:	f7fc fd1f 	bl	8000590 <__aeabi_dmul>
 8003b52:	a355      	add	r3, pc, #340	; (adr r3, 8003ca8 <__ieee754_log+0x348>)
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f7fc fb64 	bl	8000224 <__adddf3>
 8003b5c:	4632      	mov	r2, r6
 8003b5e:	463b      	mov	r3, r7
 8003b60:	f7fc fd16 	bl	8000590 <__aeabi_dmul>
 8003b64:	a352      	add	r3, pc, #328	; (adr r3, 8003cb0 <__ieee754_log+0x350>)
 8003b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6a:	f7fc fb5b 	bl	8000224 <__adddf3>
 8003b6e:	4632      	mov	r2, r6
 8003b70:	463b      	mov	r3, r7
 8003b72:	f7fc fd0d 	bl	8000590 <__aeabi_dmul>
 8003b76:	460b      	mov	r3, r1
 8003b78:	4602      	mov	r2, r0
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	4640      	mov	r0, r8
 8003b7e:	f7fc fb51 	bl	8000224 <__adddf3>
 8003b82:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8003b86:	9b01      	ldr	r3, [sp, #4]
 8003b88:	3551      	adds	r5, #81	; 0x51
 8003b8a:	431d      	orrs	r5, r3
 8003b8c:	2d00      	cmp	r5, #0
 8003b8e:	4680      	mov	r8, r0
 8003b90:	4689      	mov	r9, r1
 8003b92:	dd48      	ble.n	8003c26 <__ieee754_log+0x2c6>
 8003b94:	4b4e      	ldr	r3, [pc, #312]	; (8003cd0 <__ieee754_log+0x370>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	4650      	mov	r0, sl
 8003b9a:	4659      	mov	r1, fp
 8003b9c:	f7fc fcf8 	bl	8000590 <__aeabi_dmul>
 8003ba0:	4652      	mov	r2, sl
 8003ba2:	465b      	mov	r3, fp
 8003ba4:	f7fc fcf4 	bl	8000590 <__aeabi_dmul>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4606      	mov	r6, r0
 8003bae:	460f      	mov	r7, r1
 8003bb0:	4640      	mov	r0, r8
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	f7fc fb36 	bl	8000224 <__adddf3>
 8003bb8:	ec53 2b18 	vmov	r2, r3, d8
 8003bbc:	f7fc fce8 	bl	8000590 <__aeabi_dmul>
 8003bc0:	4680      	mov	r8, r0
 8003bc2:	4689      	mov	r9, r1
 8003bc4:	b964      	cbnz	r4, 8003be0 <__ieee754_log+0x280>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4630      	mov	r0, r6
 8003bcc:	4639      	mov	r1, r7
 8003bce:	f7fc fb27 	bl	8000220 <__aeabi_dsub>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4650      	mov	r0, sl
 8003bd8:	4659      	mov	r1, fp
 8003bda:	f7fc fb21 	bl	8000220 <__aeabi_dsub>
 8003bde:	e6d6      	b.n	800398e <__ieee754_log+0x2e>
 8003be0:	a321      	add	r3, pc, #132	; (adr r3, 8003c68 <__ieee754_log+0x308>)
 8003be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be6:	ec51 0b19 	vmov	r0, r1, d9
 8003bea:	f7fc fcd1 	bl	8000590 <__aeabi_dmul>
 8003bee:	a320      	add	r3, pc, #128	; (adr r3, 8003c70 <__ieee754_log+0x310>)
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	460d      	mov	r5, r1
 8003bf8:	ec51 0b19 	vmov	r0, r1, d9
 8003bfc:	f7fc fcc8 	bl	8000590 <__aeabi_dmul>
 8003c00:	4642      	mov	r2, r8
 8003c02:	464b      	mov	r3, r9
 8003c04:	f7fc fb0e 	bl	8000224 <__adddf3>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4630      	mov	r0, r6
 8003c0e:	4639      	mov	r1, r7
 8003c10:	f7fc fb06 	bl	8000220 <__aeabi_dsub>
 8003c14:	4652      	mov	r2, sl
 8003c16:	465b      	mov	r3, fp
 8003c18:	f7fc fb02 	bl	8000220 <__aeabi_dsub>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4620      	mov	r0, r4
 8003c22:	4629      	mov	r1, r5
 8003c24:	e7d9      	b.n	8003bda <__ieee754_log+0x27a>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4650      	mov	r0, sl
 8003c2c:	4659      	mov	r1, fp
 8003c2e:	f7fc faf7 	bl	8000220 <__aeabi_dsub>
 8003c32:	ec53 2b18 	vmov	r2, r3, d8
 8003c36:	f7fc fcab 	bl	8000590 <__aeabi_dmul>
 8003c3a:	4606      	mov	r6, r0
 8003c3c:	460f      	mov	r7, r1
 8003c3e:	2c00      	cmp	r4, #0
 8003c40:	f43f af23 	beq.w	8003a8a <__ieee754_log+0x12a>
 8003c44:	a308      	add	r3, pc, #32	; (adr r3, 8003c68 <__ieee754_log+0x308>)
 8003c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4a:	ec51 0b19 	vmov	r0, r1, d9
 8003c4e:	f7fc fc9f 	bl	8000590 <__aeabi_dmul>
 8003c52:	a307      	add	r3, pc, #28	; (adr r3, 8003c70 <__ieee754_log+0x310>)
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	4604      	mov	r4, r0
 8003c5a:	460d      	mov	r5, r1
 8003c5c:	ec51 0b19 	vmov	r0, r1, d9
 8003c60:	e727      	b.n	8003ab2 <__ieee754_log+0x152>
 8003c62:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8003cb8 <__ieee754_log+0x358>
 8003c66:	e694      	b.n	8003992 <__ieee754_log+0x32>
 8003c68:	fee00000 	.word	0xfee00000
 8003c6c:	3fe62e42 	.word	0x3fe62e42
 8003c70:	35793c76 	.word	0x35793c76
 8003c74:	3dea39ef 	.word	0x3dea39ef
 8003c78:	55555555 	.word	0x55555555
 8003c7c:	3fd55555 	.word	0x3fd55555
 8003c80:	df3e5244 	.word	0xdf3e5244
 8003c84:	3fc2f112 	.word	0x3fc2f112
 8003c88:	96cb03de 	.word	0x96cb03de
 8003c8c:	3fc74664 	.word	0x3fc74664
 8003c90:	94229359 	.word	0x94229359
 8003c94:	3fd24924 	.word	0x3fd24924
 8003c98:	55555593 	.word	0x55555593
 8003c9c:	3fe55555 	.word	0x3fe55555
 8003ca0:	d078c69f 	.word	0xd078c69f
 8003ca4:	3fc39a09 	.word	0x3fc39a09
 8003ca8:	1d8e78af 	.word	0x1d8e78af
 8003cac:	3fcc71c5 	.word	0x3fcc71c5
 8003cb0:	9997fa04 	.word	0x9997fa04
 8003cb4:	3fd99999 	.word	0x3fd99999
	...
 8003cc0:	c3500000 	.word	0xc3500000
 8003cc4:	43500000 	.word	0x43500000
 8003cc8:	7fefffff 	.word	0x7fefffff
 8003ccc:	3ff00000 	.word	0x3ff00000
 8003cd0:	3fe00000 	.word	0x3fe00000

08003cd4 <_init>:
 8003cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd6:	bf00      	nop
 8003cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cda:	bc08      	pop	{r3}
 8003cdc:	469e      	mov	lr, r3
 8003cde:	4770      	bx	lr

08003ce0 <_fini>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	bf00      	nop
 8003ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce6:	bc08      	pop	{r3}
 8003ce8:	469e      	mov	lr, r3
 8003cea:	4770      	bx	lr
