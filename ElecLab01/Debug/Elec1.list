
Elec1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aa4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003c7c  08003c7c  00013c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc0  08003cc0  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cc8  08003cc8  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc8  08003cc8  00013cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ccc  08003ccc  00013ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08003cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  200000b8  08003d88  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08003d88  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf5d  00000000  00000000  0002012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b1c  00000000  00000000  0002c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000948  00000000  00000000  0002dba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000722  00000000  00000000  0002e4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248c1  00000000  00000000  0002ec12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bca9  00000000  00000000  000534d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e91e7  00000000  00000000  0005f17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000295c  00000000  00000000  00148364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0014acc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000b8 	.word	0x200000b8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003c64 	.word	0x08003c64

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000bc 	.word	0x200000bc
 8000214:	08003c64 	.word	0x08003c64

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b970 	b.w	8000e38 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	460d      	mov	r5, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	460f      	mov	r7, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14a      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4694      	mov	ip, r2
 8000b84:	d965      	bls.n	8000c52 <__udivmoddi4+0xe2>
 8000b86:	fab2 f382 	clz	r3, r2
 8000b8a:	b143      	cbz	r3, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b90:	f1c3 0220 	rsb	r2, r3, #32
 8000b94:	409f      	lsls	r7, r3
 8000b96:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9a:	4317      	orrs	r7, r2
 8000b9c:	409c      	lsls	r4, r3
 8000b9e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ba2:	fa1f f58c 	uxth.w	r5, ip
 8000ba6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000baa:	0c22      	lsrs	r2, r4, #16
 8000bac:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bb0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bb4:	fb01 f005 	mul.w	r0, r1, r5
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	d90a      	bls.n	8000bd2 <__udivmoddi4+0x62>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bc4:	f080 811c 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f240 8119 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bce:	3902      	subs	r1, #2
 8000bd0:	4462      	add	r2, ip
 8000bd2:	1a12      	subs	r2, r2, r0
 8000bd4:	b2a4      	uxth	r4, r4
 8000bd6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bda:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bde:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be2:	fb00 f505 	mul.w	r5, r0, r5
 8000be6:	42a5      	cmp	r5, r4
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x90>
 8000bea:	eb1c 0404 	adds.w	r4, ip, r4
 8000bee:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf2:	f080 8107 	bcs.w	8000e04 <__udivmoddi4+0x294>
 8000bf6:	42a5      	cmp	r5, r4
 8000bf8:	f240 8104 	bls.w	8000e04 <__udivmoddi4+0x294>
 8000bfc:	4464      	add	r4, ip
 8000bfe:	3802      	subs	r0, #2
 8000c00:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c04:	1b64      	subs	r4, r4, r5
 8000c06:	2100      	movs	r1, #0
 8000c08:	b11e      	cbz	r6, 8000c12 <__udivmoddi4+0xa2>
 8000c0a:	40dc      	lsrs	r4, r3
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0xbc>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80ed 	beq.w	8000dfa <__udivmoddi4+0x28a>
 8000c20:	2100      	movs	r1, #0
 8000c22:	e9c6 0500 	strd	r0, r5, [r6]
 8000c26:	4608      	mov	r0, r1
 8000c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2c:	fab3 f183 	clz	r1, r3
 8000c30:	2900      	cmp	r1, #0
 8000c32:	d149      	bne.n	8000cc8 <__udivmoddi4+0x158>
 8000c34:	42ab      	cmp	r3, r5
 8000c36:	d302      	bcc.n	8000c3e <__udivmoddi4+0xce>
 8000c38:	4282      	cmp	r2, r0
 8000c3a:	f200 80f8 	bhi.w	8000e2e <__udivmoddi4+0x2be>
 8000c3e:	1a84      	subs	r4, r0, r2
 8000c40:	eb65 0203 	sbc.w	r2, r5, r3
 8000c44:	2001      	movs	r0, #1
 8000c46:	4617      	mov	r7, r2
 8000c48:	2e00      	cmp	r6, #0
 8000c4a:	d0e2      	beq.n	8000c12 <__udivmoddi4+0xa2>
 8000c4c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c50:	e7df      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000c52:	b902      	cbnz	r2, 8000c56 <__udivmoddi4+0xe6>
 8000c54:	deff      	udf	#255	; 0xff
 8000c56:	fab2 f382 	clz	r3, r2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 8090 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c60:	1a8a      	subs	r2, r1, r2
 8000c62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c66:	fa1f fe8c 	uxth.w	lr, ip
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c70:	fb07 2015 	mls	r0, r7, r5, r2
 8000c74:	0c22      	lsrs	r2, r4, #16
 8000c76:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c7a:	fb0e f005 	mul.w	r0, lr, r5
 8000c7e:	4290      	cmp	r0, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c82:	eb1c 0202 	adds.w	r2, ip, r2
 8000c86:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4290      	cmp	r0, r2
 8000c8e:	f200 80cb 	bhi.w	8000e28 <__udivmoddi4+0x2b8>
 8000c92:	4645      	mov	r5, r8
 8000c94:	1a12      	subs	r2, r2, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca8:	45a6      	cmp	lr, r4
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x14e>
 8000cac:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb4:	d202      	bcs.n	8000cbc <__udivmoddi4+0x14c>
 8000cb6:	45a6      	cmp	lr, r4
 8000cb8:	f200 80bb 	bhi.w	8000e32 <__udivmoddi4+0x2c2>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc6:	e79f      	b.n	8000c08 <__udivmoddi4+0x98>
 8000cc8:	f1c1 0720 	rsb	r7, r1, #32
 8000ccc:	408b      	lsls	r3, r1
 8000cce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cda:	fa20 f307 	lsr.w	r3, r0, r7
 8000cde:	40fd      	lsrs	r5, r7
 8000ce0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce4:	4323      	orrs	r3, r4
 8000ce6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cea:	fa1f fe8c 	uxth.w	lr, ip
 8000cee:	fb09 5518 	mls	r5, r9, r8, r5
 8000cf2:	0c1c      	lsrs	r4, r3, #16
 8000cf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cf8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cfc:	42a5      	cmp	r5, r4
 8000cfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000d02:	fa00 f001 	lsl.w	r0, r0, r1
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d10:	f080 8088 	bcs.w	8000e24 <__udivmoddi4+0x2b4>
 8000d14:	42a5      	cmp	r5, r4
 8000d16:	f240 8085 	bls.w	8000e24 <__udivmoddi4+0x2b4>
 8000d1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1e:	4464      	add	r4, ip
 8000d20:	1b64      	subs	r4, r4, r5
 8000d22:	b29d      	uxth	r5, r3
 8000d24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d28:	fb09 4413 	mls	r4, r9, r3, r4
 8000d2c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d30:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d34:	45a6      	cmp	lr, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d40:	d26c      	bcs.n	8000e1c <__udivmoddi4+0x2ac>
 8000d42:	45a6      	cmp	lr, r4
 8000d44:	d96a      	bls.n	8000e1c <__udivmoddi4+0x2ac>
 8000d46:	3b02      	subs	r3, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d52:	eba4 040e 	sub.w	r4, r4, lr
 8000d56:	42ac      	cmp	r4, r5
 8000d58:	46c8      	mov	r8, r9
 8000d5a:	46ae      	mov	lr, r5
 8000d5c:	d356      	bcc.n	8000e0c <__udivmoddi4+0x29c>
 8000d5e:	d053      	beq.n	8000e08 <__udivmoddi4+0x298>
 8000d60:	b156      	cbz	r6, 8000d78 <__udivmoddi4+0x208>
 8000d62:	ebb0 0208 	subs.w	r2, r0, r8
 8000d66:	eb64 040e 	sbc.w	r4, r4, lr
 8000d6a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d6e:	40ca      	lsrs	r2, r1
 8000d70:	40cc      	lsrs	r4, r1
 8000d72:	4317      	orrs	r7, r2
 8000d74:	e9c6 7400 	strd	r7, r4, [r6]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d80:	f1c3 0120 	rsb	r1, r3, #32
 8000d84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d88:	fa20 f201 	lsr.w	r2, r0, r1
 8000d8c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d90:	409d      	lsls	r5, r3
 8000d92:	432a      	orrs	r2, r5
 8000d94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da0:	fb07 1510 	mls	r5, r7, r0, r1
 8000da4:	0c11      	lsrs	r1, r2, #16
 8000da6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000daa:	fb00 f50e 	mul.w	r5, r0, lr
 8000dae:	428d      	cmp	r5, r1
 8000db0:	fa04 f403 	lsl.w	r4, r4, r3
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x258>
 8000db6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dbe:	d22f      	bcs.n	8000e20 <__udivmoddi4+0x2b0>
 8000dc0:	428d      	cmp	r5, r1
 8000dc2:	d92d      	bls.n	8000e20 <__udivmoddi4+0x2b0>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	4461      	add	r1, ip
 8000dc8:	1b49      	subs	r1, r1, r5
 8000dca:	b292      	uxth	r2, r2
 8000dcc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dd0:	fb07 1115 	mls	r1, r7, r5, r1
 8000dd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dd8:	fb05 f10e 	mul.w	r1, r5, lr
 8000ddc:	4291      	cmp	r1, r2
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x282>
 8000de0:	eb1c 0202 	adds.w	r2, ip, r2
 8000de4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de8:	d216      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000dea:	4291      	cmp	r1, r2
 8000dec:	d914      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000dee:	3d02      	subs	r5, #2
 8000df0:	4462      	add	r2, ip
 8000df2:	1a52      	subs	r2, r2, r1
 8000df4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000df8:	e738      	b.n	8000c6c <__udivmoddi4+0xfc>
 8000dfa:	4631      	mov	r1, r6
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e708      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000e00:	4639      	mov	r1, r7
 8000e02:	e6e6      	b.n	8000bd2 <__udivmoddi4+0x62>
 8000e04:	4610      	mov	r0, r2
 8000e06:	e6fb      	b.n	8000c00 <__udivmoddi4+0x90>
 8000e08:	4548      	cmp	r0, r9
 8000e0a:	d2a9      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e10:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e14:	3b01      	subs	r3, #1
 8000e16:	e7a3      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e18:	4645      	mov	r5, r8
 8000e1a:	e7ea      	b.n	8000df2 <__udivmoddi4+0x282>
 8000e1c:	462b      	mov	r3, r5
 8000e1e:	e794      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e20:	4640      	mov	r0, r8
 8000e22:	e7d1      	b.n	8000dc8 <__udivmoddi4+0x258>
 8000e24:	46d0      	mov	r8, sl
 8000e26:	e77b      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e28:	3d02      	subs	r5, #2
 8000e2a:	4462      	add	r2, ip
 8000e2c:	e732      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e70a      	b.n	8000c48 <__udivmoddi4+0xd8>
 8000e32:	4464      	add	r4, ip
 8000e34:	3802      	subs	r0, #2
 8000e36:	e742      	b.n	8000cbe <__udivmoddi4+0x14e>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	0000      	movs	r0, r0
	...

08000e40 <setArr>:
void ButtonMatrixRead();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setArr(uint16_t state){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	80fb      	strh	r3, [r7, #6]
	int realnum = log2(state);
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fb25 	bl	800049c <__aeabi_ui2d>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	ec43 2b10 	vmov	d0, r2, r3
 8000e5a:	f002 fd01 	bl	8003860 <log>
 8000e5e:	ec51 0b10 	vmov	r0, r1, d0
 8000e62:	a312      	add	r3, pc, #72	; (adr r3, 8000eac <setArr+0x6c>)
 8000e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e68:	f7ff fcbc 	bl	80007e4 <__aeabi_ddiv>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4610      	mov	r0, r2
 8000e72:	4619      	mov	r1, r3
 8000e74:	f7ff fe3c 	bl	8000af0 <__aeabi_d2iz>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60fb      	str	r3, [r7, #12]
	top++;
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <setArr+0x60>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3301      	adds	r3, #1
 8000e82:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <setArr+0x60>)
 8000e84:	6013      	str	r3, [r2, #0]
	myArray[top] = keys[realnum];
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <setArr+0x60>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4906      	ldr	r1, [pc, #24]	; (8000ea4 <setArr+0x64>)
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <setArr+0x68>)
 8000e94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000058 	.word	0x20000058
 8000ea4:	20000040 	.word	0x20000040
 8000ea8:	20000168 	.word	0x20000168
 8000eac:	fefa39ef 	.word	0xfefa39ef
 8000eb0:	3fe62e42 	.word	0x3fe62e42

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eba:	f000 fb0c 	bl	80014d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebe:	f000 f83d 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec2:	f000 f8d1 	bl	8001068 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000ec6:	f000 f885 	bl	8000fd4 <MX_LPUART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint32_t BTMX_TimeStamp = 0;
	  if(HAL_GetTick() > BTMX_TimeStamp)
 8000eca:	f000 fb69 	bl	80015a0 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <main+0x7c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d9f8      	bls.n	8000eca <main+0x16>
	  {
	  BTMX_TimeStamp = HAL_GetTick() + 25; //next scan in 25 ms
 8000ed8:	f000 fb62 	bl	80015a0 <HAL_GetTick>
 8000edc:	4603      	mov	r3, r0
 8000ede:	3319      	adds	r3, #25
 8000ee0:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <main+0x7c>)
 8000ee2:	6013      	str	r3, [r2, #0]
	  ButtonMatrixRead();
 8000ee4:	f000 f990 	bl	8001208 <ButtonMatrixRead>
	  GPIO_PinState S = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000ee8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f000 fdf4 	bl	8001adc <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	71fb      	strb	r3, [r7, #7]
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, S);
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	461a      	mov	r2, r3
 8000efc:	2101      	movs	r1, #1
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f000 fe03 	bl	8001b0c <HAL_GPIO_WritePin>
	  	  status = S;
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <main+0x80>)
 8000f0a:	6013      	str	r3, [r2, #0]
	  if (ButtonState != 0) {
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <main+0x84>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0da      	beq.n	8000eca <main+0x16>
		  setArr(ButtonState);
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <main+0x84>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff91 	bl	8000e40 <setArr>
		while(ButtonState != 0)
 8000f1e:	e001      	b.n	8000f24 <main+0x70>
		{
			ButtonMatrixRead();
 8000f20:	f000 f972 	bl	8001208 <ButtonMatrixRead>
		while(ButtonState != 0)
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <main+0x84>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f9      	bne.n	8000f20 <main+0x6c>
  {
 8000f2c:	e7cd      	b.n	8000eca <main+0x16>
 8000f2e:	bf00      	nop
 8000f30:	20000184 	.word	0x20000184
 8000f34:	20000180 	.word	0x20000180
 8000f38:	20000164 	.word	0x20000164

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b094      	sub	sp, #80	; 0x50
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 0318 	add.w	r3, r7, #24
 8000f46:	2238      	movs	r2, #56	; 0x38
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 fc54 	bl	80037f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f000 fe10 	bl	8001b84 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f64:	2302      	movs	r3, #2
 8000f66:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f6e:	2340      	movs	r3, #64	; 0x40
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f72:	2302      	movs	r3, #2
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f76:	2302      	movs	r3, #2
 8000f78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f7e:	2355      	movs	r3, #85	; 0x55
 8000f80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f82:	2302      	movs	r3, #2
 8000f84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f86:	2302      	movs	r3, #2
 8000f88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8e:	f107 0318 	add.w	r3, r7, #24
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 feaa 	bl	8001cec <HAL_RCC_OscConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f9e:	f000 f9ab 	bl	80012f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2104      	movs	r1, #4
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 f9ae 	bl	800231c <HAL_RCC_ClockConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000fc6:	f000 f997 	bl	80012f8 <Error_Handler>
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3750      	adds	r7, #80	; 0x50
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_LPUART1_UART_Init+0x8c>)
 8000fda:	4a22      	ldr	r2, [pc, #136]	; (8001064 <MX_LPUART1_UART_Init+0x90>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <MX_LPUART1_UART_Init+0x8c>)
 8000fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_LPUART1_UART_Init+0x8c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MX_LPUART1_UART_Init+0x8c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <MX_LPUART1_UART_Init+0x8c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <MX_LPUART1_UART_Init+0x8c>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_LPUART1_UART_Init+0x8c>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <MX_LPUART1_UART_Init+0x8c>)
 8001006:	2200      	movs	r2, #0
 8001008:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <MX_LPUART1_UART_Init+0x8c>)
 800100c:	2200      	movs	r2, #0
 800100e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <MX_LPUART1_UART_Init+0x8c>)
 8001012:	2200      	movs	r2, #0
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001016:	4812      	ldr	r0, [pc, #72]	; (8001060 <MX_LPUART1_UART_Init+0x8c>)
 8001018:	f001 fdea 	bl	8002bf0 <HAL_UART_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001022:	f000 f969 	bl	80012f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001026:	2100      	movs	r1, #0
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <MX_LPUART1_UART_Init+0x8c>)
 800102a:	f002 fb1b 	bl	8003664 <HAL_UARTEx_SetTxFifoThreshold>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001034:	f000 f960 	bl	80012f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001038:	2100      	movs	r1, #0
 800103a:	4809      	ldr	r0, [pc, #36]	; (8001060 <MX_LPUART1_UART_Init+0x8c>)
 800103c:	f002 fb50 	bl	80036e0 <HAL_UARTEx_SetRxFifoThreshold>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001046:	f000 f957 	bl	80012f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_LPUART1_UART_Init+0x8c>)
 800104c:	f002 fad1 	bl	80035f2 <HAL_UARTEx_DisableFifoMode>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001056:	f000 f94f 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200000d4 	.word	0x200000d4
 8001064:	40008000 	.word	0x40008000

08001068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	4b5f      	ldr	r3, [pc, #380]	; (80011fc <MX_GPIO_Init+0x194>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a5e      	ldr	r2, [pc, #376]	; (80011fc <MX_GPIO_Init+0x194>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b5c      	ldr	r3, [pc, #368]	; (80011fc <MX_GPIO_Init+0x194>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001096:	4b59      	ldr	r3, [pc, #356]	; (80011fc <MX_GPIO_Init+0x194>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a58      	ldr	r2, [pc, #352]	; (80011fc <MX_GPIO_Init+0x194>)
 800109c:	f043 0320 	orr.w	r3, r3, #32
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b56      	ldr	r3, [pc, #344]	; (80011fc <MX_GPIO_Init+0x194>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b53      	ldr	r3, [pc, #332]	; (80011fc <MX_GPIO_Init+0x194>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a52      	ldr	r2, [pc, #328]	; (80011fc <MX_GPIO_Init+0x194>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b50      	ldr	r3, [pc, #320]	; (80011fc <MX_GPIO_Init+0x194>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b4d      	ldr	r3, [pc, #308]	; (80011fc <MX_GPIO_Init+0x194>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	4a4c      	ldr	r2, [pc, #304]	; (80011fc <MX_GPIO_Init+0x194>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d2:	4b4a      	ldr	r3, [pc, #296]	; (80011fc <MX_GPIO_Init+0x194>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	2121      	movs	r1, #33	; 0x21
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f000 fd11 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80010f0:	4843      	ldr	r0, [pc, #268]	; (8001200 <MX_GPIO_Init+0x198>)
 80010f2:	f000 fd0b 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001100:	f000 fd04 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001104:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800110a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800110e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	483a      	ldr	r0, [pc, #232]	; (8001204 <MX_GPIO_Init+0x19c>)
 800111c:	f000 fb5c 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8001120:	2321      	movs	r3, #33	; 0x21
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113a:	f000 fb4d 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800113e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001148:	2301      	movs	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001156:	f000 fb3f 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 800115a:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001160:	2311      	movs	r3, #17
 8001162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	4823      	ldr	r0, [pc, #140]	; (8001200 <MX_GPIO_Init+0x198>)
 8001174:	f000 fb30 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001180:	2301      	movs	r3, #1
 8001182:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	481e      	ldr	r0, [pc, #120]	; (8001204 <MX_GPIO_Init+0x19c>)
 800118c:	f000 fb24 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001196:	2311      	movs	r3, #17
 8001198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ac:	f000 fb14 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c8:	f000 fb06 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011cc:	2340      	movs	r3, #64	; 0x40
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4808      	ldr	r0, [pc, #32]	; (8001200 <MX_GPIO_Init+0x198>)
 80011e0:	f000 fafa 	bl	80017d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2100      	movs	r1, #0
 80011e8:	2028      	movs	r0, #40	; 0x28
 80011ea:	f000 fac0 	bl	800176e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ee:	2028      	movs	r0, #40	; 0x28
 80011f0:	f000 fad7 	bl	80017a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	; 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40021000 	.word	0x40021000
 8001200:	48000400 	.word	0x48000400
 8001204:	48000800 	.word	0x48000800

08001208 <ButtonMatrixRead>:

/* USER CODE BEGIN 4 */
void ButtonMatrixRead(){
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
static uint8_t X=0;
for(int i=0; i<4; i++)
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	e037      	b.n	8001284 <ButtonMatrixRead+0x7c>
{
if(HAL_GPIO_ReadPin(BMX_L[i].Port, BMX_L[i].Pin) == GPIO_PIN_RESET)
 8001214:	4a34      	ldr	r2, [pc, #208]	; (80012e8 <ButtonMatrixRead+0xe0>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800121c:	4932      	ldr	r1, [pc, #200]	; (80012e8 <ButtonMatrixRead+0xe0>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	440b      	add	r3, r1
 8001224:	889b      	ldrh	r3, [r3, #4]
 8001226:	4619      	mov	r1, r3
 8001228:	4610      	mov	r0, r2
 800122a:	f000 fc57 	bl	8001adc <HAL_GPIO_ReadPin>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d111      	bne.n	8001258 <ButtonMatrixRead+0x50>
{ //�?ุ�?มถู�?�?ด
ButtonState |= 1 << (i + (X * 4));
 8001234:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <ButtonMatrixRead+0xe4>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	009a      	lsls	r2, r3, #2
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	2201      	movs	r2, #1
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	b21a      	sxth	r2, r3
 8001246:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <ButtonMatrixRead+0xe8>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	b21b      	sxth	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b21b      	sxth	r3, r3
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <ButtonMatrixRead+0xe8>)
 8001254:	801a      	strh	r2, [r3, #0]
 8001256:	e012      	b.n	800127e <ButtonMatrixRead+0x76>
}
else
{
ButtonState &= ~(1 << (i + (X * 4)));
 8001258:	4b24      	ldr	r3, [pc, #144]	; (80012ec <ButtonMatrixRead+0xe4>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	009a      	lsls	r2, r3, #2
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	2201      	movs	r2, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	b21b      	sxth	r3, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	b21a      	sxth	r2, r3
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <ButtonMatrixRead+0xe8>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	b21b      	sxth	r3, r3
 8001274:	4013      	ands	r3, r2
 8001276:	b21b      	sxth	r3, r3
 8001278:	b29a      	uxth	r2, r3
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <ButtonMatrixRead+0xe8>)
 800127c:	801a      	strh	r2, [r3, #0]
for(int i=0; i<4; i++)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3301      	adds	r3, #1
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b03      	cmp	r3, #3
 8001288:	ddc4      	ble.n	8001214 <ButtonMatrixRead+0xc>
}
}
//set currentL to Hi-z (open drain)
HAL_GPIO_WritePin(BMX_R[X].Port, BMX_R[X].Pin, GPIO_PIN_SET);
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <ButtonMatrixRead+0xe4>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <ButtonMatrixRead+0xec>)
 8001292:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <ButtonMatrixRead+0xe4>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	4a16      	ldr	r2, [pc, #88]	; (80012f4 <ButtonMatrixRead+0xec>)
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4413      	add	r3, r2
 80012a0:	889b      	ldrh	r3, [r3, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	4619      	mov	r1, r3
 80012a6:	f000 fc31 	bl	8001b0c <HAL_GPIO_WritePin>
//set nextL to low
uint8_t nextX = (X + 1) % 4;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <ButtonMatrixRead+0xe4>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	425a      	negs	r2, r3
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	f002 0203 	and.w	r2, r2, #3
 80012ba:	bf58      	it	pl
 80012bc:	4253      	negpl	r3, r2
 80012be:	70fb      	strb	r3, [r7, #3]
HAL_GPIO_WritePin(BMX_R[nextX].Port, BMX_R[nextX].Pin, GPIO_PIN_RESET);
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <ButtonMatrixRead+0xec>)
 80012c4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <ButtonMatrixRead+0xec>)
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4413      	add	r3, r2
 80012d0:	889b      	ldrh	r3, [r3, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	4619      	mov	r1, r3
 80012d6:	f000 fc19 	bl	8001b0c <HAL_GPIO_WritePin>
X = nextX;
 80012da:	4a04      	ldr	r2, [pc, #16]	; (80012ec <ButtonMatrixRead+0xe4>)
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	7013      	strb	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000188 	.word	0x20000188
 80012f0:	20000164 	.word	0x20000164
 80012f4:	20000020 	.word	0x20000020

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001300:	e7fe      	b.n	8001300 <Error_Handler+0x8>
	...

08001304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_MspInit+0x44>)
 800130c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_MspInit+0x44>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6613      	str	r3, [r2, #96]	; 0x60
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_MspInit+0x44>)
 8001318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_MspInit+0x44>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_MspInit+0x44>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132c:	6593      	str	r3, [r2, #88]	; 0x58
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_MspInit+0x44>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800133a:	f000 fcc7 	bl	8001ccc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000

0800134c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b09e      	sub	sp, #120	; 0x78
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	2254      	movs	r2, #84	; 0x54
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f002 fa43 	bl	80037f8 <memset>
  if(huart->Instance==LPUART1)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a1f      	ldr	r2, [pc, #124]	; (80013f4 <HAL_UART_MspInit+0xa8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d136      	bne.n	80013ea <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800137c:	2320      	movs	r3, #32
 800137e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001380:	2300      	movs	r3, #0
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	4618      	mov	r0, r3
 800138a:	f001 f9e3 	bl	8002754 <HAL_RCCEx_PeriphCLKConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001394:	f7ff ffb0 	bl	80012f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_UART_MspInit+0xac>)
 800139a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139c:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <HAL_UART_MspInit+0xac>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_UART_MspInit+0xac>)
 80013a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_UART_MspInit+0xac>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <HAL_UART_MspInit+0xac>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_UART_MspInit+0xac>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80013c8:	230c      	movs	r3, #12
 80013ca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80013d8:	230c      	movs	r3, #12
 80013da:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013e0:	4619      	mov	r1, r3
 80013e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e6:	f000 f9f7 	bl	80017d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80013ea:	bf00      	nop
 80013ec:	3778      	adds	r7, #120	; 0x78
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40008000 	.word	0x40008000
 80013f8:	40021000 	.word	0x40021000

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <NMI_Handler+0x4>

08001402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <MemManage_Handler+0x4>

0800140e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <BusFault_Handler+0x4>

08001414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <UsageFault_Handler+0x4>

0800141a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001448:	f000 f898 	bl	800157c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001454:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001458:	f000 fb70 	bl	8001b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <SystemInit+0x20>)
 8001466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <SystemInit+0x20>)
 800146c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001486:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001488:	480d      	ldr	r0, [pc, #52]	; (80014c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800148a:	490e      	ldr	r1, [pc, #56]	; (80014c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800148c:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <LoopForever+0xe>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a0:	4c0b      	ldr	r4, [pc, #44]	; (80014d0 <LoopForever+0x16>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ae:	f7ff ffd7 	bl	8001460 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b2:	f002 f9af 	bl	8003814 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014b6:	f7ff fcfd 	bl	8000eb4 <main>

080014ba <LoopForever>:

LoopForever:
    b LoopForever
 80014ba:	e7fe      	b.n	80014ba <LoopForever>
  ldr   r0, =_estack
 80014bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c4:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80014c8:	08003cd0 	.word	0x08003cd0
  ldr r2, =_sbss
 80014cc:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80014d0:	200002c8 	.word	0x200002c8

080014d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC1_2_IRQHandler>

080014d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e0:	2003      	movs	r0, #3
 80014e2:	f000 f939 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e6:	2000      	movs	r0, #0
 80014e8:	f000 f80e 	bl	8001508 <HAL_InitTick>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	71fb      	strb	r3, [r7, #7]
 80014f6:	e001      	b.n	80014fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014f8:	f7ff ff04 	bl	8001304 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014fc:	79fb      	ldrb	r3, [r7, #7]

}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_InitTick+0x68>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d022      	beq.n	8001562 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_InitTick+0x6c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_InitTick+0x68>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001528:	fbb1 f3f3 	udiv	r3, r1, r3
 800152c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001530:	4618      	mov	r0, r3
 8001532:	f000 f944 	bl	80017be <HAL_SYSTICK_Config>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10f      	bne.n	800155c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b0f      	cmp	r3, #15
 8001540:	d809      	bhi.n	8001556 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001542:	2200      	movs	r2, #0
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	f04f 30ff 	mov.w	r0, #4294967295
 800154a:	f000 f910 	bl	800176e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_InitTick+0x70>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	e007      	b.n	8001566 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	e004      	b.n	8001566 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e001      	b.n	8001566 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000064 	.word	0x20000064
 8001574:	2000005c 	.word	0x2000005c
 8001578:	20000060 	.word	0x20000060

0800157c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_IncTick+0x1c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_IncTick+0x20>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4413      	add	r3, r2
 800158a:	4a03      	ldr	r2, [pc, #12]	; (8001598 <HAL_IncTick+0x1c>)
 800158c:	6013      	str	r3, [r2, #0]
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	2000018c 	.word	0x2000018c
 800159c:	20000064 	.word	0x20000064

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	2000018c 	.word	0x2000018c

080015b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d4:	4013      	ands	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ea:	4a04      	ldr	r2, [pc, #16]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	60d3      	str	r3, [r2, #12]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <__NVIC_GetPriorityGrouping+0x18>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	f003 0307 	and.w	r3, r3, #7
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	db0b      	blt.n	8001646 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	f003 021f 	and.w	r2, r3, #31
 8001634:	4907      	ldr	r1, [pc, #28]	; (8001654 <__NVIC_EnableIRQ+0x38>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	2001      	movs	r0, #1
 800163e:	fa00 f202 	lsl.w	r2, r0, r2
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001724:	d301      	bcc.n	800172a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001726:	2301      	movs	r3, #1
 8001728:	e00f      	b.n	800174a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <SysTick_Config+0x40>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001732:	210f      	movs	r1, #15
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f7ff ff8e 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <SysTick_Config+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <SysTick_Config+0x40>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff29 	bl	80015b8 <__NVIC_SetPriorityGrouping>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800177c:	f7ff ff40 	bl	8001600 <__NVIC_GetPriorityGrouping>
 8001780:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	6978      	ldr	r0, [r7, #20]
 8001788:	f7ff ff90 	bl	80016ac <NVIC_EncodePriority>
 800178c:	4602      	mov	r2, r0
 800178e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff5f 	bl	8001658 <__NVIC_SetPriority>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff33 	bl	800161c <__NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffa4 	bl	8001714 <SysTick_Config>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017e6:	e15a      	b.n	8001a9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2101      	movs	r1, #1
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	4013      	ands	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 814c 	beq.w	8001a98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b01      	cmp	r3, #1
 800180a:	d005      	beq.n	8001818 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001814:	2b02      	cmp	r3, #2
 8001816:	d130      	bne.n	800187a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	2203      	movs	r2, #3
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800184e:	2201      	movs	r2, #1
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	f003 0201 	and.w	r2, r3, #1
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b03      	cmp	r3, #3
 8001884:	d017      	beq.n	80018b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	2203      	movs	r2, #3
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d123      	bne.n	800190a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	08da      	lsrs	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3208      	adds	r2, #8
 80018ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	220f      	movs	r2, #15
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	691a      	ldr	r2, [r3, #16]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	08da      	lsrs	r2, r3, #3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3208      	adds	r2, #8
 8001904:	6939      	ldr	r1, [r7, #16]
 8001906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	2203      	movs	r2, #3
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0203 	and.w	r2, r3, #3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 80a6 	beq.w	8001a98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194c:	4b5b      	ldr	r3, [pc, #364]	; (8001abc <HAL_GPIO_Init+0x2e4>)
 800194e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001950:	4a5a      	ldr	r2, [pc, #360]	; (8001abc <HAL_GPIO_Init+0x2e4>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6613      	str	r3, [r2, #96]	; 0x60
 8001958:	4b58      	ldr	r3, [pc, #352]	; (8001abc <HAL_GPIO_Init+0x2e4>)
 800195a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001964:	4a56      	ldr	r2, [pc, #344]	; (8001ac0 <HAL_GPIO_Init+0x2e8>)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3302      	adds	r3, #2
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	220f      	movs	r2, #15
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800198e:	d01f      	beq.n	80019d0 <HAL_GPIO_Init+0x1f8>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a4c      	ldr	r2, [pc, #304]	; (8001ac4 <HAL_GPIO_Init+0x2ec>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d019      	beq.n	80019cc <HAL_GPIO_Init+0x1f4>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a4b      	ldr	r2, [pc, #300]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d013      	beq.n	80019c8 <HAL_GPIO_Init+0x1f0>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a4a      	ldr	r2, [pc, #296]	; (8001acc <HAL_GPIO_Init+0x2f4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00d      	beq.n	80019c4 <HAL_GPIO_Init+0x1ec>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a49      	ldr	r2, [pc, #292]	; (8001ad0 <HAL_GPIO_Init+0x2f8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d007      	beq.n	80019c0 <HAL_GPIO_Init+0x1e8>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a48      	ldr	r2, [pc, #288]	; (8001ad4 <HAL_GPIO_Init+0x2fc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d101      	bne.n	80019bc <HAL_GPIO_Init+0x1e4>
 80019b8:	2305      	movs	r3, #5
 80019ba:	e00a      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019bc:	2306      	movs	r3, #6
 80019be:	e008      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019c0:	2304      	movs	r3, #4
 80019c2:	e006      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019c4:	2303      	movs	r3, #3
 80019c6:	e004      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019d0:	2300      	movs	r3, #0
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	f002 0203 	and.w	r2, r2, #3
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	4093      	lsls	r3, r2
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e2:	4937      	ldr	r1, [pc, #220]	; (8001ac0 <HAL_GPIO_Init+0x2e8>)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019f0:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a14:	4a30      	ldr	r2, [pc, #192]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a3e:	4a26      	ldr	r2, [pc, #152]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a44:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a68:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a92:	4a11      	ldr	r2, [pc, #68]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f47f ae9d 	bne.w	80017e8 <HAL_GPIO_Init+0x10>
  }
}
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	48000400 	.word	0x48000400
 8001ac8:	48000800 	.word	0x48000800
 8001acc:	48000c00 	.word	0x48000c00
 8001ad0:	48001000 	.word	0x48001000
 8001ad4:	48001400 	.word	0x48001400
 8001ad8:	40010400 	.word	0x40010400

08001adc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	887b      	ldrh	r3, [r7, #2]
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	e001      	b.n	8001afe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b1c:	787b      	ldrb	r3, [r7, #1]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b28:	e002      	b.n	8001b30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f806 	bl	8001b6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40010400 	.word	0x40010400

08001b6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d141      	bne.n	8001c16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b92:	4b4b      	ldr	r3, [pc, #300]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b9e:	d131      	bne.n	8001c04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ba0:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ba6:	4a46      	ldr	r2, [pc, #280]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb0:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bb8:	4a41      	ldr	r2, [pc, #260]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bc0:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2232      	movs	r2, #50	; 0x32
 8001bc6:	fb02 f303 	mul.w	r3, r2, r3
 8001bca:	4a3f      	ldr	r2, [pc, #252]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd0:	0c9b      	lsrs	r3, r3, #18
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd6:	e002      	b.n	8001bde <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bde:	4b38      	ldr	r3, [pc, #224]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bea:	d102      	bne.n	8001bf2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f2      	bne.n	8001bd8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bf2:	4b33      	ldr	r3, [pc, #204]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfe:	d158      	bne.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e057      	b.n	8001cb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c04:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c0a:	4a2d      	ldr	r2, [pc, #180]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c14:	e04d      	b.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c1c:	d141      	bne.n	8001ca2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c1e:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c2a:	d131      	bne.n	8001c90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c2c:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c32:	4a23      	ldr	r2, [pc, #140]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c3c:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c44:	4a1e      	ldr	r2, [pc, #120]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2232      	movs	r2, #50	; 0x32
 8001c52:	fb02 f303 	mul.w	r3, r2, r3
 8001c56:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c58:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5c:	0c9b      	lsrs	r3, r3, #18
 8001c5e:	3301      	adds	r3, #1
 8001c60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c62:	e002      	b.n	8001c6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c76:	d102      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f2      	bne.n	8001c64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8a:	d112      	bne.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e011      	b.n	8001cb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ca0:	e007      	b.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ca2:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001caa:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cb0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	40007000 	.word	0x40007000
 8001cc4:	2000005c 	.word	0x2000005c
 8001cc8:	431bde83 	.word	0x431bde83

08001ccc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cda:	6093      	str	r3, [r2, #8]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40007000 	.word	0x40007000

08001cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e306      	b.n	800230c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d075      	beq.n	8001df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d0a:	4b97      	ldr	r3, [pc, #604]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d14:	4b94      	ldr	r3, [pc, #592]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	2b0c      	cmp	r3, #12
 8001d22:	d102      	bne.n	8001d2a <HAL_RCC_OscConfig+0x3e>
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d002      	beq.n	8001d30 <HAL_RCC_OscConfig+0x44>
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d10b      	bne.n	8001d48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	4b8d      	ldr	r3, [pc, #564]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d05b      	beq.n	8001df4 <HAL_RCC_OscConfig+0x108>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d157      	bne.n	8001df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e2e1      	b.n	800230c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d50:	d106      	bne.n	8001d60 <HAL_RCC_OscConfig+0x74>
 8001d52:	4b85      	ldr	r3, [pc, #532]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a84      	ldr	r2, [pc, #528]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e01d      	b.n	8001d9c <HAL_RCC_OscConfig+0xb0>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x98>
 8001d6a:	4b7f      	ldr	r3, [pc, #508]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a7e      	ldr	r2, [pc, #504]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b7c      	ldr	r3, [pc, #496]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a7b      	ldr	r2, [pc, #492]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0xb0>
 8001d84:	4b78      	ldr	r3, [pc, #480]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a77      	ldr	r2, [pc, #476]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b75      	ldr	r3, [pc, #468]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a74      	ldr	r2, [pc, #464]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d013      	beq.n	8001dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7ff fbfc 	bl	80015a0 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff fbf8 	bl	80015a0 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	; 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e2a6      	b.n	800230c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dbe:	4b6a      	ldr	r3, [pc, #424]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0xc0>
 8001dca:	e014      	b.n	8001df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fbe8 	bl	80015a0 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff fbe4 	bl	80015a0 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	; 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e292      	b.n	800230c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001de6:	4b60      	ldr	r3, [pc, #384]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0xe8>
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d075      	beq.n	8001eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e02:	4b59      	ldr	r3, [pc, #356]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e0c:	4b56      	ldr	r3, [pc, #344]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	2b0c      	cmp	r3, #12
 8001e1a:	d102      	bne.n	8001e22 <HAL_RCC_OscConfig+0x136>
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d002      	beq.n	8001e28 <HAL_RCC_OscConfig+0x13c>
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d11f      	bne.n	8001e68 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e28:	4b4f      	ldr	r3, [pc, #316]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_OscConfig+0x154>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e265      	b.n	800230c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e40:	4b49      	ldr	r3, [pc, #292]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	061b      	lsls	r3, r3, #24
 8001e4e:	4946      	ldr	r1, [pc, #280]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e54:	4b45      	ldr	r3, [pc, #276]	; (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fb55 	bl	8001508 <HAL_InitTick>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d043      	beq.n	8001eec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e251      	b.n	800230c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d023      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e70:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a3c      	ldr	r2, [pc, #240]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fb90 	bl	80015a0 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e84:	f7ff fb8c 	bl	80015a0 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e23a      	b.n	800230c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e96:	4b34      	ldr	r3, [pc, #208]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea2:	4b31      	ldr	r3, [pc, #196]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	061b      	lsls	r3, r3, #24
 8001eb0:	492d      	ldr	r1, [pc, #180]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	604b      	str	r3, [r1, #4]
 8001eb6:	e01a      	b.n	8001eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a2a      	ldr	r2, [pc, #168]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001ebe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fb6c 	bl	80015a0 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ecc:	f7ff fb68 	bl	80015a0 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e216      	b.n	800230c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x1e0>
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d041      	beq.n	8001f7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d01c      	beq.n	8001f3c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f02:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f08:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f12:	f7ff fb45 	bl	80015a0 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1a:	f7ff fb41 	bl	80015a0 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e1ef      	b.n	800230c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0ef      	beq.n	8001f1a <HAL_RCC_OscConfig+0x22e>
 8001f3a:	e020      	b.n	8001f7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f42:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4c:	f7ff fb28 	bl	80015a0 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f52:	e00d      	b.n	8001f70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f54:	f7ff fb24 	bl	80015a0 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d906      	bls.n	8001f70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e1d2      	b.n	800230c <HAL_RCC_OscConfig+0x620>
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	20000060 	.word	0x20000060
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f70:	4b8c      	ldr	r3, [pc, #560]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 8001f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1ea      	bne.n	8001f54 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 80a6 	beq.w	80020d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f90:	4b84      	ldr	r3, [pc, #528]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x2b4>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x2b6>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00d      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	4b7f      	ldr	r3, [pc, #508]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	4a7e      	ldr	r2, [pc, #504]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb2:	4b7c      	ldr	r3, [pc, #496]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc2:	4b79      	ldr	r3, [pc, #484]	; (80021a8 <HAL_RCC_OscConfig+0x4bc>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d118      	bne.n	8002000 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fce:	4b76      	ldr	r3, [pc, #472]	; (80021a8 <HAL_RCC_OscConfig+0x4bc>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a75      	ldr	r2, [pc, #468]	; (80021a8 <HAL_RCC_OscConfig+0x4bc>)
 8001fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fda:	f7ff fae1 	bl	80015a0 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe2:	f7ff fadd 	bl	80015a0 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e18b      	b.n	800230c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff4:	4b6c      	ldr	r3, [pc, #432]	; (80021a8 <HAL_RCC_OscConfig+0x4bc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d108      	bne.n	800201a <HAL_RCC_OscConfig+0x32e>
 8002008:	4b66      	ldr	r3, [pc, #408]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	4a65      	ldr	r2, [pc, #404]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002018:	e024      	b.n	8002064 <HAL_RCC_OscConfig+0x378>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b05      	cmp	r3, #5
 8002020:	d110      	bne.n	8002044 <HAL_RCC_OscConfig+0x358>
 8002022:	4b60      	ldr	r3, [pc, #384]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002028:	4a5e      	ldr	r2, [pc, #376]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 800202a:	f043 0304 	orr.w	r3, r3, #4
 800202e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002032:	4b5c      	ldr	r3, [pc, #368]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 8002034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002038:	4a5a      	ldr	r2, [pc, #360]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002042:	e00f      	b.n	8002064 <HAL_RCC_OscConfig+0x378>
 8002044:	4b57      	ldr	r3, [pc, #348]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204a:	4a56      	ldr	r2, [pc, #344]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 800204c:	f023 0301 	bic.w	r3, r3, #1
 8002050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002054:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	4a52      	ldr	r2, [pc, #328]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 800205c:	f023 0304 	bic.w	r3, r3, #4
 8002060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d016      	beq.n	800209a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7ff fa98 	bl	80015a0 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002072:	e00a      	b.n	800208a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002074:	f7ff fa94 	bl	80015a0 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e140      	b.n	800230c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208a:	4b46      	ldr	r3, [pc, #280]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0ed      	beq.n	8002074 <HAL_RCC_OscConfig+0x388>
 8002098:	e015      	b.n	80020c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209a:	f7ff fa81 	bl	80015a0 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7ff fa7d 	bl	80015a0 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e129      	b.n	800230c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020b8:	4b3a      	ldr	r3, [pc, #232]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1ed      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020c6:	7ffb      	ldrb	r3, [r7, #31]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d105      	bne.n	80020d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020cc:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	4a34      	ldr	r2, [pc, #208]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 80020d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d03c      	beq.n	800215e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01c      	beq.n	8002126 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020ec:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 80020ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f2:	4a2c      	ldr	r2, [pc, #176]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fc:	f7ff fa50 	bl	80015a0 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002104:	f7ff fa4c 	bl	80015a0 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e0fa      	b.n	800230c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002116:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 8002118:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0ef      	beq.n	8002104 <HAL_RCC_OscConfig+0x418>
 8002124:	e01b      	b.n	800215e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002126:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 8002128:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800212c:	4a1d      	ldr	r2, [pc, #116]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 800212e:	f023 0301 	bic.w	r3, r3, #1
 8002132:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002136:	f7ff fa33 	bl	80015a0 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800213e:	f7ff fa2f 	bl	80015a0 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e0dd      	b.n	800230c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 8002152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1ef      	bne.n	800213e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 80d1 	beq.w	800230a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 030c 	and.w	r3, r3, #12
 8002170:	2b0c      	cmp	r3, #12
 8002172:	f000 808b 	beq.w	800228c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d15e      	bne.n	800223c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a08      	ldr	r2, [pc, #32]	; (80021a4 <HAL_RCC_OscConfig+0x4b8>)
 8002184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218a:	f7ff fa09 	bl	80015a0 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002190:	e00c      	b.n	80021ac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002192:	f7ff fa05 	bl	80015a0 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d905      	bls.n	80021ac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e0b3      	b.n	800230c <HAL_RCC_OscConfig+0x620>
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ac:	4b59      	ldr	r3, [pc, #356]	; (8002314 <HAL_RCC_OscConfig+0x628>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1ec      	bne.n	8002192 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021b8:	4b56      	ldr	r3, [pc, #344]	; (8002314 <HAL_RCC_OscConfig+0x628>)
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	4b56      	ldr	r3, [pc, #344]	; (8002318 <HAL_RCC_OscConfig+0x62c>)
 80021be:	4013      	ands	r3, r2
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6a11      	ldr	r1, [r2, #32]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021c8:	3a01      	subs	r2, #1
 80021ca:	0112      	lsls	r2, r2, #4
 80021cc:	4311      	orrs	r1, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80021d2:	0212      	lsls	r2, r2, #8
 80021d4:	4311      	orrs	r1, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021da:	0852      	lsrs	r2, r2, #1
 80021dc:	3a01      	subs	r2, #1
 80021de:	0552      	lsls	r2, r2, #21
 80021e0:	4311      	orrs	r1, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021e6:	0852      	lsrs	r2, r2, #1
 80021e8:	3a01      	subs	r2, #1
 80021ea:	0652      	lsls	r2, r2, #25
 80021ec:	4311      	orrs	r1, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021f2:	06d2      	lsls	r2, r2, #27
 80021f4:	430a      	orrs	r2, r1
 80021f6:	4947      	ldr	r1, [pc, #284]	; (8002314 <HAL_RCC_OscConfig+0x628>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021fc:	4b45      	ldr	r3, [pc, #276]	; (8002314 <HAL_RCC_OscConfig+0x628>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a44      	ldr	r2, [pc, #272]	; (8002314 <HAL_RCC_OscConfig+0x628>)
 8002202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002206:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002208:	4b42      	ldr	r3, [pc, #264]	; (8002314 <HAL_RCC_OscConfig+0x628>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	4a41      	ldr	r2, [pc, #260]	; (8002314 <HAL_RCC_OscConfig+0x628>)
 800220e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002212:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7ff f9c4 	bl	80015a0 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221c:	f7ff f9c0 	bl	80015a0 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e06e      	b.n	800230c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222e:	4b39      	ldr	r3, [pc, #228]	; (8002314 <HAL_RCC_OscConfig+0x628>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x530>
 800223a:	e066      	b.n	800230a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223c:	4b35      	ldr	r3, [pc, #212]	; (8002314 <HAL_RCC_OscConfig+0x628>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a34      	ldr	r2, [pc, #208]	; (8002314 <HAL_RCC_OscConfig+0x628>)
 8002242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002246:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002248:	4b32      	ldr	r3, [pc, #200]	; (8002314 <HAL_RCC_OscConfig+0x628>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a31      	ldr	r2, [pc, #196]	; (8002314 <HAL_RCC_OscConfig+0x628>)
 800224e:	f023 0303 	bic.w	r3, r3, #3
 8002252:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002254:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <HAL_RCC_OscConfig+0x628>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a2e      	ldr	r2, [pc, #184]	; (8002314 <HAL_RCC_OscConfig+0x628>)
 800225a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800225e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002262:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7ff f99c 	bl	80015a0 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226c:	f7ff f998 	bl	80015a0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e046      	b.n	800230c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227e:	4b25      	ldr	r3, [pc, #148]	; (8002314 <HAL_RCC_OscConfig+0x628>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x580>
 800228a:	e03e      	b.n	800230a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e039      	b.n	800230c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002298:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <HAL_RCC_OscConfig+0x628>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 0203 	and.w	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d12c      	bne.n	8002306 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	3b01      	subs	r3, #1
 80022b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d123      	bne.n	8002306 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d11b      	bne.n	8002306 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022da:	429a      	cmp	r2, r3
 80022dc:	d113      	bne.n	8002306 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	085b      	lsrs	r3, r3, #1
 80022ea:	3b01      	subs	r3, #1
 80022ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d109      	bne.n	8002306 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fc:	085b      	lsrs	r3, r3, #1
 80022fe:	3b01      	subs	r3, #1
 8002300:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d001      	beq.n	800230a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3720      	adds	r7, #32
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	019f800c 	.word	0x019f800c

0800231c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e11e      	b.n	8002572 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002334:	4b91      	ldr	r3, [pc, #580]	; (800257c <HAL_RCC_ClockConfig+0x260>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d910      	bls.n	8002364 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b8e      	ldr	r3, [pc, #568]	; (800257c <HAL_RCC_ClockConfig+0x260>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 020f 	bic.w	r2, r3, #15
 800234a:	498c      	ldr	r1, [pc, #560]	; (800257c <HAL_RCC_ClockConfig+0x260>)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b8a      	ldr	r3, [pc, #552]	; (800257c <HAL_RCC_ClockConfig+0x260>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e106      	b.n	8002572 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d073      	beq.n	8002458 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d129      	bne.n	80023cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002378:	4b81      	ldr	r3, [pc, #516]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0f4      	b.n	8002572 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002388:	f000 f99e 	bl	80026c8 <RCC_GetSysClockFreqFromPLLSource>
 800238c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4a7c      	ldr	r2, [pc, #496]	; (8002584 <HAL_RCC_ClockConfig+0x268>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d93f      	bls.n	8002416 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002396:	4b7a      	ldr	r3, [pc, #488]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d033      	beq.n	8002416 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d12f      	bne.n	8002416 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023b6:	4b72      	ldr	r3, [pc, #456]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023be:	4a70      	ldr	r2, [pc, #448]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 80023c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	e024      	b.n	8002416 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d4:	4b6a      	ldr	r3, [pc, #424]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d109      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0c6      	b.n	8002572 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023e4:	4b66      	ldr	r3, [pc, #408]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0be      	b.n	8002572 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023f4:	f000 f8ce 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4a61      	ldr	r2, [pc, #388]	; (8002584 <HAL_RCC_ClockConfig+0x268>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d909      	bls.n	8002416 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002402:	4b5f      	ldr	r3, [pc, #380]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800240a:	4a5d      	ldr	r2, [pc, #372]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 800240c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002410:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002416:	4b5a      	ldr	r3, [pc, #360]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f023 0203 	bic.w	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4957      	ldr	r1, [pc, #348]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002424:	4313      	orrs	r3, r2
 8002426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002428:	f7ff f8ba 	bl	80015a0 <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	e00a      	b.n	8002446 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	f7ff f8b6 	bl	80015a0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e095      	b.n	8002572 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	4b4e      	ldr	r3, [pc, #312]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 020c 	and.w	r2, r3, #12
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	429a      	cmp	r2, r3
 8002456:	d1eb      	bne.n	8002430 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d023      	beq.n	80024ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002470:	4b43      	ldr	r3, [pc, #268]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a42      	ldr	r2, [pc, #264]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002476:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800247a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002488:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002490:	4a3b      	ldr	r2, [pc, #236]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002492:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002496:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002498:	4b39      	ldr	r3, [pc, #228]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4936      	ldr	r1, [pc, #216]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
 80024aa:	e008      	b.n	80024be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b80      	cmp	r3, #128	; 0x80
 80024b0:	d105      	bne.n	80024be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024b2:	4b33      	ldr	r3, [pc, #204]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	4a32      	ldr	r2, [pc, #200]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 80024b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024be:	4b2f      	ldr	r3, [pc, #188]	; (800257c <HAL_RCC_ClockConfig+0x260>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d21d      	bcs.n	8002508 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024cc:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_RCC_ClockConfig+0x260>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 020f 	bic.w	r2, r3, #15
 80024d4:	4929      	ldr	r1, [pc, #164]	; (800257c <HAL_RCC_ClockConfig+0x260>)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024dc:	f7ff f860 	bl	80015a0 <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e4:	f7ff f85c 	bl	80015a0 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e03b      	b.n	8002572 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_RCC_ClockConfig+0x260>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d1ed      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002514:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4917      	ldr	r1, [pc, #92]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002532:	4b13      	ldr	r3, [pc, #76]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	490f      	ldr	r1, [pc, #60]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002546:	f000 f825 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 800254a:	4602      	mov	r2, r0
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <HAL_RCC_ClockConfig+0x264>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	490c      	ldr	r1, [pc, #48]	; (8002588 <HAL_RCC_ClockConfig+0x26c>)
 8002558:	5ccb      	ldrb	r3, [r1, r3]
 800255a:	f003 031f 	and.w	r3, r3, #31
 800255e:	fa22 f303 	lsr.w	r3, r2, r3
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <HAL_RCC_ClockConfig+0x270>)
 8002564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_RCC_ClockConfig+0x274>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe ffcc 	bl	8001508 <HAL_InitTick>
 8002570:	4603      	mov	r3, r0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40022000 	.word	0x40022000
 8002580:	40021000 	.word	0x40021000
 8002584:	04c4b400 	.word	0x04c4b400
 8002588:	08003c7c 	.word	0x08003c7c
 800258c:	2000005c 	.word	0x2000005c
 8002590:	20000060 	.word	0x20000060

08002594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800259a:	4b2c      	ldr	r3, [pc, #176]	; (800264c <HAL_RCC_GetSysClockFreq+0xb8>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d102      	bne.n	80025ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025a6:	4b2a      	ldr	r3, [pc, #168]	; (8002650 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	e047      	b.n	800263c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025ac:	4b27      	ldr	r3, [pc, #156]	; (800264c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 030c 	and.w	r3, r3, #12
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d102      	bne.n	80025be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025b8:	4b26      	ldr	r3, [pc, #152]	; (8002654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	e03e      	b.n	800263c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025be:	4b23      	ldr	r3, [pc, #140]	; (800264c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b0c      	cmp	r3, #12
 80025c8:	d136      	bne.n	8002638 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3301      	adds	r3, #1
 80025e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d10c      	bne.n	8002602 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025e8:	4a1a      	ldr	r2, [pc, #104]	; (8002654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f0:	4a16      	ldr	r2, [pc, #88]	; (800264c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f2:	68d2      	ldr	r2, [r2, #12]
 80025f4:	0a12      	lsrs	r2, r2, #8
 80025f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	617b      	str	r3, [r7, #20]
      break;
 8002600:	e00c      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002602:	4a13      	ldr	r2, [pc, #76]	; (8002650 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	fbb2 f3f3 	udiv	r3, r2, r3
 800260a:	4a10      	ldr	r2, [pc, #64]	; (800264c <HAL_RCC_GetSysClockFreq+0xb8>)
 800260c:	68d2      	ldr	r2, [r2, #12]
 800260e:	0a12      	lsrs	r2, r2, #8
 8002610:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002614:	fb02 f303 	mul.w	r3, r2, r3
 8002618:	617b      	str	r3, [r7, #20]
      break;
 800261a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCC_GetSysClockFreq+0xb8>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0e5b      	lsrs	r3, r3, #25
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	3301      	adds	r3, #1
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	fbb2 f3f3 	udiv	r3, r2, r3
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	e001      	b.n	800263c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800263c:	693b      	ldr	r3, [r7, #16]
}
 800263e:	4618      	mov	r0, r3
 8002640:	371c      	adds	r7, #28
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	00f42400 	.word	0x00f42400
 8002654:	016e3600 	.word	0x016e3600

08002658 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <HAL_RCC_GetHCLKFreq+0x14>)
 800265e:	681b      	ldr	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	2000005c 	.word	0x2000005c

08002670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002674:	f7ff fff0 	bl	8002658 <HAL_RCC_GetHCLKFreq>
 8002678:	4602      	mov	r2, r0
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x24>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	4904      	ldr	r1, [pc, #16]	; (8002698 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002686:	5ccb      	ldrb	r3, [r1, r3]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000
 8002698:	08003c8c 	.word	0x08003c8c

0800269c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026a0:	f7ff ffda 	bl	8002658 <HAL_RCC_GetHCLKFreq>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	0adb      	lsrs	r3, r3, #11
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	4904      	ldr	r1, [pc, #16]	; (80026c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026b2:	5ccb      	ldrb	r3, [r1, r3]
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026bc:	4618      	mov	r0, r3
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40021000 	.word	0x40021000
 80026c4:	08003c8c 	.word	0x08003c8c

080026c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026ce:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	3301      	adds	r3, #1
 80026e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d10c      	bne.n	8002706 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026ec:	4a17      	ldr	r2, [pc, #92]	; (800274c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026f6:	68d2      	ldr	r2, [r2, #12]
 80026f8:	0a12      	lsrs	r2, r2, #8
 80026fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026fe:	fb02 f303 	mul.w	r3, r2, r3
 8002702:	617b      	str	r3, [r7, #20]
    break;
 8002704:	e00c      	b.n	8002720 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002706:	4a12      	ldr	r2, [pc, #72]	; (8002750 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	fbb2 f3f3 	udiv	r3, r2, r3
 800270e:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002710:	68d2      	ldr	r2, [r2, #12]
 8002712:	0a12      	lsrs	r2, r2, #8
 8002714:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002718:	fb02 f303 	mul.w	r3, r2, r3
 800271c:	617b      	str	r3, [r7, #20]
    break;
 800271e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	0e5b      	lsrs	r3, r3, #25
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	3301      	adds	r3, #1
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	fbb2 f3f3 	udiv	r3, r2, r3
 8002738:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800273a:	687b      	ldr	r3, [r7, #4]
}
 800273c:	4618      	mov	r0, r3
 800273e:	371c      	adds	r7, #28
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	40021000 	.word	0x40021000
 800274c:	016e3600 	.word	0x016e3600
 8002750:	00f42400 	.word	0x00f42400

08002754 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800275c:	2300      	movs	r3, #0
 800275e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002760:	2300      	movs	r3, #0
 8002762:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 8098 	beq.w	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002776:	4b43      	ldr	r3, [pc, #268]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10d      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	4b40      	ldr	r3, [pc, #256]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	4a3f      	ldr	r2, [pc, #252]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278c:	6593      	str	r3, [r2, #88]	; 0x58
 800278e:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279a:	2301      	movs	r3, #1
 800279c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800279e:	4b3a      	ldr	r3, [pc, #232]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a39      	ldr	r2, [pc, #228]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027aa:	f7fe fef9 	bl	80015a0 <HAL_GetTick>
 80027ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027b0:	e009      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b2:	f7fe fef5 	bl	80015a0 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d902      	bls.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	74fb      	strb	r3, [r7, #19]
        break;
 80027c4:	e005      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027c6:	4b30      	ldr	r3, [pc, #192]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0ef      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80027d2:	7cfb      	ldrb	r3, [r7, #19]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d159      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027d8:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d01e      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d019      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027f4:	4b23      	ldr	r3, [pc, #140]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002800:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002806:	4a1f      	ldr	r2, [pc, #124]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002810:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002816:	4a1b      	ldr	r2, [pc, #108]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800281c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002820:	4a18      	ldr	r2, [pc, #96]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d016      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7fe feb5 	bl	80015a0 <HAL_GetTick>
 8002836:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002838:	e00b      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7fe feb1 	bl	80015a0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d902      	bls.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	74fb      	strb	r3, [r7, #19]
            break;
 8002850:	e006      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0ec      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002860:	7cfb      	ldrb	r3, [r7, #19]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10b      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002874:	4903      	ldr	r1, [pc, #12]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800287c:	e008      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	74bb      	strb	r3, [r7, #18]
 8002882:	e005      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002884:	40021000 	.word	0x40021000
 8002888:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800288c:	7cfb      	ldrb	r3, [r7, #19]
 800288e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002890:	7c7b      	ldrb	r3, [r7, #17]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d105      	bne.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002896:	4ba7      	ldr	r3, [pc, #668]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289a:	4aa6      	ldr	r2, [pc, #664]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800289c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ae:	4ba1      	ldr	r3, [pc, #644]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b4:	f023 0203 	bic.w	r2, r3, #3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	499d      	ldr	r1, [pc, #628]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028d0:	4b98      	ldr	r3, [pc, #608]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d6:	f023 020c 	bic.w	r2, r3, #12
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	4995      	ldr	r1, [pc, #596]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028f2:	4b90      	ldr	r3, [pc, #576]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	498c      	ldr	r1, [pc, #560]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002914:	4b87      	ldr	r3, [pc, #540]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	4984      	ldr	r1, [pc, #528]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002936:	4b7f      	ldr	r3, [pc, #508]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	497b      	ldr	r1, [pc, #492]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002958:	4b76      	ldr	r3, [pc, #472]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	4973      	ldr	r1, [pc, #460]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800297a:	4b6e      	ldr	r3, [pc, #440]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002980:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	496a      	ldr	r1, [pc, #424]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800299c:	4b65      	ldr	r3, [pc, #404]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	4962      	ldr	r1, [pc, #392]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029be:	4b5d      	ldr	r3, [pc, #372]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	4959      	ldr	r1, [pc, #356]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029e0:	4b54      	ldr	r3, [pc, #336]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029e6:	f023 0203 	bic.w	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	4951      	ldr	r1, [pc, #324]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a02:	4b4c      	ldr	r3, [pc, #304]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	4948      	ldr	r1, [pc, #288]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d015      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a24:	4b43      	ldr	r3, [pc, #268]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4940      	ldr	r1, [pc, #256]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a42:	d105      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a44:	4b3b      	ldr	r3, [pc, #236]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4a3a      	ldr	r2, [pc, #232]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d015      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a5c:	4b35      	ldr	r3, [pc, #212]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6a:	4932      	ldr	r1, [pc, #200]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a7a:	d105      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a7c:	4b2d      	ldr	r3, [pc, #180]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a2c      	ldr	r2, [pc, #176]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a86:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d015      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a94:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa2:	4924      	ldr	r1, [pc, #144]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ab2:	d105      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab4:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4a1e      	ldr	r2, [pc, #120]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002abe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d015      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002acc:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ada:	4916      	ldr	r1, [pc, #88]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aea:	d105      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aec:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d019      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	4908      	ldr	r1, [pc, #32]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b22:	d109      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b24:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4a02      	ldr	r2, [pc, #8]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b2e:	60d3      	str	r3, [r2, #12]
 8002b30:	e002      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d015      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b44:	4b29      	ldr	r3, [pc, #164]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	4926      	ldr	r1, [pc, #152]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b62:	d105      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b64:	4b21      	ldr	r3, [pc, #132]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a20      	ldr	r2, [pc, #128]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d015      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b82:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8a:	4918      	ldr	r1, [pc, #96]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9a:	d105      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b9c:	4b13      	ldr	r3, [pc, #76]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4a12      	ldr	r2, [pc, #72]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d015      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002bb4:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc2:	490a      	ldr	r1, [pc, #40]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bd2:	d105      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4a04      	ldr	r2, [pc, #16]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bde:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002be0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000

08002bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e042      	b.n	8002c88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d106      	bne.n	8002c1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7fe fb99 	bl	800134c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2224      	movs	r2, #36	; 0x24
 8002c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0201 	bic.w	r2, r2, #1
 8002c30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f82c 	bl	8002c90 <UART_SetConfig>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e022      	b.n	8002c88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fb1c 	bl	8003288 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fba3 	bl	80033cc <UART_CheckIdleState>
 8002c86:	4603      	mov	r3, r0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c94:	b08c      	sub	sp, #48	; 0x30
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	4baa      	ldr	r3, [pc, #680]	; (8002f68 <UART_SetConfig+0x2d8>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a9f      	ldr	r2, [pc, #636]	; (8002f6c <UART_SetConfig+0x2dc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d004      	beq.n	8002cfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002d06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d10:	430b      	orrs	r3, r1
 8002d12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	f023 010f 	bic.w	r1, r3, #15
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a90      	ldr	r2, [pc, #576]	; (8002f70 <UART_SetConfig+0x2e0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d125      	bne.n	8002d80 <UART_SetConfig+0xf0>
 8002d34:	4b8f      	ldr	r3, [pc, #572]	; (8002f74 <UART_SetConfig+0x2e4>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d81a      	bhi.n	8002d78 <UART_SetConfig+0xe8>
 8002d42:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <UART_SetConfig+0xb8>)
 8002d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d48:	08002d59 	.word	0x08002d59
 8002d4c:	08002d69 	.word	0x08002d69
 8002d50:	08002d61 	.word	0x08002d61
 8002d54:	08002d71 	.word	0x08002d71
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d5e:	e116      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002d60:	2302      	movs	r3, #2
 8002d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d66:	e112      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d6e:	e10e      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002d70:	2308      	movs	r3, #8
 8002d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d76:	e10a      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002d78:	2310      	movs	r3, #16
 8002d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d7e:	e106      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a7c      	ldr	r2, [pc, #496]	; (8002f78 <UART_SetConfig+0x2e8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d138      	bne.n	8002dfc <UART_SetConfig+0x16c>
 8002d8a:	4b7a      	ldr	r3, [pc, #488]	; (8002f74 <UART_SetConfig+0x2e4>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b0c      	cmp	r3, #12
 8002d96:	d82d      	bhi.n	8002df4 <UART_SetConfig+0x164>
 8002d98:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <UART_SetConfig+0x110>)
 8002d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9e:	bf00      	nop
 8002da0:	08002dd5 	.word	0x08002dd5
 8002da4:	08002df5 	.word	0x08002df5
 8002da8:	08002df5 	.word	0x08002df5
 8002dac:	08002df5 	.word	0x08002df5
 8002db0:	08002de5 	.word	0x08002de5
 8002db4:	08002df5 	.word	0x08002df5
 8002db8:	08002df5 	.word	0x08002df5
 8002dbc:	08002df5 	.word	0x08002df5
 8002dc0:	08002ddd 	.word	0x08002ddd
 8002dc4:	08002df5 	.word	0x08002df5
 8002dc8:	08002df5 	.word	0x08002df5
 8002dcc:	08002df5 	.word	0x08002df5
 8002dd0:	08002ded 	.word	0x08002ded
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dda:	e0d8      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002de2:	e0d4      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002de4:	2304      	movs	r3, #4
 8002de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dea:	e0d0      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002dec:	2308      	movs	r3, #8
 8002dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002df2:	e0cc      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002df4:	2310      	movs	r3, #16
 8002df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dfa:	e0c8      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a5e      	ldr	r2, [pc, #376]	; (8002f7c <UART_SetConfig+0x2ec>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d125      	bne.n	8002e52 <UART_SetConfig+0x1c2>
 8002e06:	4b5b      	ldr	r3, [pc, #364]	; (8002f74 <UART_SetConfig+0x2e4>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e10:	2b30      	cmp	r3, #48	; 0x30
 8002e12:	d016      	beq.n	8002e42 <UART_SetConfig+0x1b2>
 8002e14:	2b30      	cmp	r3, #48	; 0x30
 8002e16:	d818      	bhi.n	8002e4a <UART_SetConfig+0x1ba>
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d00a      	beq.n	8002e32 <UART_SetConfig+0x1a2>
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	d814      	bhi.n	8002e4a <UART_SetConfig+0x1ba>
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <UART_SetConfig+0x19a>
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d008      	beq.n	8002e3a <UART_SetConfig+0x1aa>
 8002e28:	e00f      	b.n	8002e4a <UART_SetConfig+0x1ba>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e30:	e0ad      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002e32:	2302      	movs	r3, #2
 8002e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e38:	e0a9      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002e3a:	2304      	movs	r3, #4
 8002e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e40:	e0a5      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002e42:	2308      	movs	r3, #8
 8002e44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e48:	e0a1      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002e4a:	2310      	movs	r3, #16
 8002e4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e50:	e09d      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a4a      	ldr	r2, [pc, #296]	; (8002f80 <UART_SetConfig+0x2f0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d125      	bne.n	8002ea8 <UART_SetConfig+0x218>
 8002e5c:	4b45      	ldr	r3, [pc, #276]	; (8002f74 <UART_SetConfig+0x2e4>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e66:	2bc0      	cmp	r3, #192	; 0xc0
 8002e68:	d016      	beq.n	8002e98 <UART_SetConfig+0x208>
 8002e6a:	2bc0      	cmp	r3, #192	; 0xc0
 8002e6c:	d818      	bhi.n	8002ea0 <UART_SetConfig+0x210>
 8002e6e:	2b80      	cmp	r3, #128	; 0x80
 8002e70:	d00a      	beq.n	8002e88 <UART_SetConfig+0x1f8>
 8002e72:	2b80      	cmp	r3, #128	; 0x80
 8002e74:	d814      	bhi.n	8002ea0 <UART_SetConfig+0x210>
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <UART_SetConfig+0x1f0>
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	d008      	beq.n	8002e90 <UART_SetConfig+0x200>
 8002e7e:	e00f      	b.n	8002ea0 <UART_SetConfig+0x210>
 8002e80:	2300      	movs	r3, #0
 8002e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e86:	e082      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e8e:	e07e      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002e90:	2304      	movs	r3, #4
 8002e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e96:	e07a      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002e98:	2308      	movs	r3, #8
 8002e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e9e:	e076      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ea6:	e072      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a35      	ldr	r2, [pc, #212]	; (8002f84 <UART_SetConfig+0x2f4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d12a      	bne.n	8002f08 <UART_SetConfig+0x278>
 8002eb2:	4b30      	ldr	r3, [pc, #192]	; (8002f74 <UART_SetConfig+0x2e4>)
 8002eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ebc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec0:	d01a      	beq.n	8002ef8 <UART_SetConfig+0x268>
 8002ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec6:	d81b      	bhi.n	8002f00 <UART_SetConfig+0x270>
 8002ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ecc:	d00c      	beq.n	8002ee8 <UART_SetConfig+0x258>
 8002ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed2:	d815      	bhi.n	8002f00 <UART_SetConfig+0x270>
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <UART_SetConfig+0x250>
 8002ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002edc:	d008      	beq.n	8002ef0 <UART_SetConfig+0x260>
 8002ede:	e00f      	b.n	8002f00 <UART_SetConfig+0x270>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ee6:	e052      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eee:	e04e      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ef6:	e04a      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002ef8:	2308      	movs	r3, #8
 8002efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002efe:	e046      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002f00:	2310      	movs	r3, #16
 8002f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f06:	e042      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a17      	ldr	r2, [pc, #92]	; (8002f6c <UART_SetConfig+0x2dc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d13a      	bne.n	8002f88 <UART_SetConfig+0x2f8>
 8002f12:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <UART_SetConfig+0x2e4>)
 8002f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f20:	d01a      	beq.n	8002f58 <UART_SetConfig+0x2c8>
 8002f22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f26:	d81b      	bhi.n	8002f60 <UART_SetConfig+0x2d0>
 8002f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f2c:	d00c      	beq.n	8002f48 <UART_SetConfig+0x2b8>
 8002f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f32:	d815      	bhi.n	8002f60 <UART_SetConfig+0x2d0>
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <UART_SetConfig+0x2b0>
 8002f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3c:	d008      	beq.n	8002f50 <UART_SetConfig+0x2c0>
 8002f3e:	e00f      	b.n	8002f60 <UART_SetConfig+0x2d0>
 8002f40:	2300      	movs	r3, #0
 8002f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f46:	e022      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f4e:	e01e      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002f50:	2304      	movs	r3, #4
 8002f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f56:	e01a      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002f58:	2308      	movs	r3, #8
 8002f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f5e:	e016      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002f60:	2310      	movs	r3, #16
 8002f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f66:	e012      	b.n	8002f8e <UART_SetConfig+0x2fe>
 8002f68:	cfff69f3 	.word	0xcfff69f3
 8002f6c:	40008000 	.word	0x40008000
 8002f70:	40013800 	.word	0x40013800
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40004400 	.word	0x40004400
 8002f7c:	40004800 	.word	0x40004800
 8002f80:	40004c00 	.word	0x40004c00
 8002f84:	40005000 	.word	0x40005000
 8002f88:	2310      	movs	r3, #16
 8002f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4aae      	ldr	r2, [pc, #696]	; (800324c <UART_SetConfig+0x5bc>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	f040 8097 	bne.w	80030c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d823      	bhi.n	8002fea <UART_SetConfig+0x35a>
 8002fa2:	a201      	add	r2, pc, #4	; (adr r2, 8002fa8 <UART_SetConfig+0x318>)
 8002fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa8:	08002fcd 	.word	0x08002fcd
 8002fac:	08002feb 	.word	0x08002feb
 8002fb0:	08002fd5 	.word	0x08002fd5
 8002fb4:	08002feb 	.word	0x08002feb
 8002fb8:	08002fdb 	.word	0x08002fdb
 8002fbc:	08002feb 	.word	0x08002feb
 8002fc0:	08002feb 	.word	0x08002feb
 8002fc4:	08002feb 	.word	0x08002feb
 8002fc8:	08002fe3 	.word	0x08002fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fcc:	f7ff fb50 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 8002fd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002fd2:	e010      	b.n	8002ff6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fd4:	4b9e      	ldr	r3, [pc, #632]	; (8003250 <UART_SetConfig+0x5c0>)
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002fd8:	e00d      	b.n	8002ff6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fda:	f7ff fadb 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8002fde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002fe0:	e009      	b.n	8002ff6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002fe8:	e005      	b.n	8002ff6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002ff4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8130 	beq.w	800325e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	4a94      	ldr	r2, [pc, #592]	; (8003254 <UART_SetConfig+0x5c4>)
 8003004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003008:	461a      	mov	r2, r3
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003010:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4413      	add	r3, r2
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	429a      	cmp	r2, r3
 8003020:	d305      	bcc.n	800302e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	429a      	cmp	r2, r3
 800302c:	d903      	bls.n	8003036 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003034:	e113      	b.n	800325e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	2200      	movs	r2, #0
 800303a:	60bb      	str	r3, [r7, #8]
 800303c:	60fa      	str	r2, [r7, #12]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	4a84      	ldr	r2, [pc, #528]	; (8003254 <UART_SetConfig+0x5c4>)
 8003044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003048:	b29b      	uxth	r3, r3
 800304a:	2200      	movs	r2, #0
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003054:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003058:	f7fd fd72 	bl	8000b40 <__aeabi_uldivmod>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	020b      	lsls	r3, r1, #8
 800306e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003072:	0202      	lsls	r2, r0, #8
 8003074:	6979      	ldr	r1, [r7, #20]
 8003076:	6849      	ldr	r1, [r1, #4]
 8003078:	0849      	lsrs	r1, r1, #1
 800307a:	2000      	movs	r0, #0
 800307c:	460c      	mov	r4, r1
 800307e:	4605      	mov	r5, r0
 8003080:	eb12 0804 	adds.w	r8, r2, r4
 8003084:	eb43 0905 	adc.w	r9, r3, r5
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	469a      	mov	sl, r3
 8003090:	4693      	mov	fp, r2
 8003092:	4652      	mov	r2, sl
 8003094:	465b      	mov	r3, fp
 8003096:	4640      	mov	r0, r8
 8003098:	4649      	mov	r1, r9
 800309a:	f7fd fd51 	bl	8000b40 <__aeabi_uldivmod>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4613      	mov	r3, r2
 80030a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ac:	d308      	bcc.n	80030c0 <UART_SetConfig+0x430>
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b4:	d204      	bcs.n	80030c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6a3a      	ldr	r2, [r7, #32]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	e0ce      	b.n	800325e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80030c6:	e0ca      	b.n	800325e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d0:	d166      	bne.n	80031a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80030d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d827      	bhi.n	800312a <UART_SetConfig+0x49a>
 80030da:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <UART_SetConfig+0x450>)
 80030dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e0:	08003105 	.word	0x08003105
 80030e4:	0800310d 	.word	0x0800310d
 80030e8:	08003115 	.word	0x08003115
 80030ec:	0800312b 	.word	0x0800312b
 80030f0:	0800311b 	.word	0x0800311b
 80030f4:	0800312b 	.word	0x0800312b
 80030f8:	0800312b 	.word	0x0800312b
 80030fc:	0800312b 	.word	0x0800312b
 8003100:	08003123 	.word	0x08003123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003104:	f7ff fab4 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 8003108:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800310a:	e014      	b.n	8003136 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800310c:	f7ff fac6 	bl	800269c <HAL_RCC_GetPCLK2Freq>
 8003110:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003112:	e010      	b.n	8003136 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003114:	4b4e      	ldr	r3, [pc, #312]	; (8003250 <UART_SetConfig+0x5c0>)
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003118:	e00d      	b.n	8003136 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800311a:	f7ff fa3b 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 800311e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003120:	e009      	b.n	8003136 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003128:	e005      	b.n	8003136 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003134:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 8090 	beq.w	800325e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	4a44      	ldr	r2, [pc, #272]	; (8003254 <UART_SetConfig+0x5c4>)
 8003144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003148:	461a      	mov	r2, r3
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003150:	005a      	lsls	r2, r3, #1
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	085b      	lsrs	r3, r3, #1
 8003158:	441a      	add	r2, r3
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003162:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	2b0f      	cmp	r3, #15
 8003168:	d916      	bls.n	8003198 <UART_SetConfig+0x508>
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003170:	d212      	bcs.n	8003198 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	b29b      	uxth	r3, r3
 8003176:	f023 030f 	bic.w	r3, r3, #15
 800317a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	085b      	lsrs	r3, r3, #1
 8003180:	b29b      	uxth	r3, r3
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	b29a      	uxth	r2, r3
 8003188:	8bfb      	ldrh	r3, [r7, #30]
 800318a:	4313      	orrs	r3, r2
 800318c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	8bfa      	ldrh	r2, [r7, #30]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	e062      	b.n	800325e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800319e:	e05e      	b.n	800325e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d828      	bhi.n	80031fa <UART_SetConfig+0x56a>
 80031a8:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <UART_SetConfig+0x520>)
 80031aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ae:	bf00      	nop
 80031b0:	080031d5 	.word	0x080031d5
 80031b4:	080031dd 	.word	0x080031dd
 80031b8:	080031e5 	.word	0x080031e5
 80031bc:	080031fb 	.word	0x080031fb
 80031c0:	080031eb 	.word	0x080031eb
 80031c4:	080031fb 	.word	0x080031fb
 80031c8:	080031fb 	.word	0x080031fb
 80031cc:	080031fb 	.word	0x080031fb
 80031d0:	080031f3 	.word	0x080031f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031d4:	f7ff fa4c 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 80031d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80031da:	e014      	b.n	8003206 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031dc:	f7ff fa5e 	bl	800269c <HAL_RCC_GetPCLK2Freq>
 80031e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80031e2:	e010      	b.n	8003206 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e4:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <UART_SetConfig+0x5c0>)
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80031e8:	e00d      	b.n	8003206 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ea:	f7ff f9d3 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 80031ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80031f0:	e009      	b.n	8003206 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80031f8:	e005      	b.n	8003206 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003204:	bf00      	nop
    }

    if (pclk != 0U)
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	2b00      	cmp	r3, #0
 800320a:	d028      	beq.n	800325e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	4a10      	ldr	r2, [pc, #64]	; (8003254 <UART_SetConfig+0x5c4>)
 8003212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003216:	461a      	mov	r2, r3
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	fbb3 f2f2 	udiv	r2, r3, r2
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	085b      	lsrs	r3, r3, #1
 8003224:	441a      	add	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	fbb2 f3f3 	udiv	r3, r2, r3
 800322e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	2b0f      	cmp	r3, #15
 8003234:	d910      	bls.n	8003258 <UART_SetConfig+0x5c8>
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323c:	d20c      	bcs.n	8003258 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	b29a      	uxth	r2, r3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60da      	str	r2, [r3, #12]
 8003248:	e009      	b.n	800325e <UART_SetConfig+0x5ce>
 800324a:	bf00      	nop
 800324c:	40008000 	.word	0x40008000
 8003250:	00f42400 	.word	0x00f42400
 8003254:	08003c94 	.word	0x08003c94
      }
      else
      {
        ret = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2201      	movs	r2, #1
 8003262:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2201      	movs	r2, #1
 800326a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2200      	movs	r2, #0
 8003272:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2200      	movs	r2, #0
 8003278:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800327a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800327e:	4618      	mov	r0, r3
 8003280:	3730      	adds	r7, #48	; 0x30
 8003282:	46bd      	mov	sp, r7
 8003284:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01a      	beq.n	800339e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003386:	d10a      	bne.n	800339e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	605a      	str	r2, [r3, #4]
  }
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033dc:	f7fe f8e0 	bl	80015a0 <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d10e      	bne.n	800340e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f82f 	bl	8003462 <UART_WaitOnFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e025      	b.n	800345a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b04      	cmp	r3, #4
 800341a:	d10e      	bne.n	800343a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800341c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f819 	bl	8003462 <UART_WaitOnFlagUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e00f      	b.n	800345a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b09c      	sub	sp, #112	; 0x70
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	603b      	str	r3, [r7, #0]
 800346e:	4613      	mov	r3, r2
 8003470:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003472:	e0a9      	b.n	80035c8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347a:	f000 80a5 	beq.w	80035c8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347e:	f7fe f88f 	bl	80015a0 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <UART_WaitOnFlagUntilTimeout+0x32>
 800348e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003490:	2b00      	cmp	r3, #0
 8003492:	d140      	bne.n	8003516 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800349c:	e853 3f00 	ldrex	r3, [r3]
 80034a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80034a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034a8:	667b      	str	r3, [r7, #100]	; 0x64
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80034b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034ba:	e841 2300 	strex	r3, r2, [r1]
 80034be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80034c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1e6      	bne.n	8003494 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3308      	adds	r3, #8
 80034cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d0:	e853 3f00 	ldrex	r3, [r3]
 80034d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	663b      	str	r3, [r7, #96]	; 0x60
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3308      	adds	r3, #8
 80034e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80034e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034ee:	e841 2300 	strex	r3, r2, [r1]
 80034f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80034f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1e5      	bne.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2220      	movs	r2, #32
 8003506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e069      	b.n	80035ea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d051      	beq.n	80035c8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800352e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003532:	d149      	bne.n	80035c8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800353c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	e853 3f00 	ldrex	r3, [r3]
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003552:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800355c:	637b      	str	r3, [r7, #52]	; 0x34
 800355e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003560:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003564:	e841 2300 	strex	r3, r2, [r1]
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e6      	bne.n	800353e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3308      	adds	r3, #8
 8003576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	e853 3f00 	ldrex	r3, [r3]
 800357e:	613b      	str	r3, [r7, #16]
   return(result);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	66bb      	str	r3, [r7, #104]	; 0x68
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3308      	adds	r3, #8
 800358e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003590:	623a      	str	r2, [r7, #32]
 8003592:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003594:	69f9      	ldr	r1, [r7, #28]
 8003596:	6a3a      	ldr	r2, [r7, #32]
 8003598:	e841 2300 	strex	r3, r2, [r1]
 800359c:	61bb      	str	r3, [r7, #24]
   return(result);
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1e5      	bne.n	8003570 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e010      	b.n	80035ea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	4013      	ands	r3, r2
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	bf0c      	ite	eq
 80035d8:	2301      	moveq	r3, #1
 80035da:	2300      	movne	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	f43f af46 	beq.w	8003474 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3770      	adds	r7, #112	; 0x70
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b085      	sub	sp, #20
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_UARTEx_DisableFifoMode+0x16>
 8003604:	2302      	movs	r3, #2
 8003606:	e027      	b.n	8003658 <HAL_UARTEx_DisableFifoMode+0x66>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	; 0x24
 8003614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0201 	bic.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003636:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003678:	2302      	movs	r3, #2
 800367a:	e02d      	b.n	80036d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2224      	movs	r2, #36	; 0x24
 8003688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f84f 	bl	800375c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e02d      	b.n	8003754 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2224      	movs	r2, #36	; 0x24
 8003704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f811 	bl	800375c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003768:	2b00      	cmp	r3, #0
 800376a:	d108      	bne.n	800377e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800377c:	e031      	b.n	80037e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800377e:	2308      	movs	r3, #8
 8003780:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003782:	2308      	movs	r3, #8
 8003784:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	0e5b      	lsrs	r3, r3, #25
 800378e:	b2db      	uxtb	r3, r3
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	0f5b      	lsrs	r3, r3, #29
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037a6:	7bbb      	ldrb	r3, [r7, #14]
 80037a8:	7b3a      	ldrb	r2, [r7, #12]
 80037aa:	4911      	ldr	r1, [pc, #68]	; (80037f0 <UARTEx_SetNbDataToProcess+0x94>)
 80037ac:	5c8a      	ldrb	r2, [r1, r2]
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80037b2:	7b3a      	ldrb	r2, [r7, #12]
 80037b4:	490f      	ldr	r1, [pc, #60]	; (80037f4 <UARTEx_SetNbDataToProcess+0x98>)
 80037b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80037bc:	b29a      	uxth	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	7b7a      	ldrb	r2, [r7, #13]
 80037c8:	4909      	ldr	r1, [pc, #36]	; (80037f0 <UARTEx_SetNbDataToProcess+0x94>)
 80037ca:	5c8a      	ldrb	r2, [r1, r2]
 80037cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80037d0:	7b7a      	ldrb	r2, [r7, #13]
 80037d2:	4908      	ldr	r1, [pc, #32]	; (80037f4 <UARTEx_SetNbDataToProcess+0x98>)
 80037d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80037e2:	bf00      	nop
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	08003cac 	.word	0x08003cac
 80037f4:	08003cb4 	.word	0x08003cb4

080037f8 <memset>:
 80037f8:	4402      	add	r2, r0
 80037fa:	4603      	mov	r3, r0
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d100      	bne.n	8003802 <memset+0xa>
 8003800:	4770      	bx	lr
 8003802:	f803 1b01 	strb.w	r1, [r3], #1
 8003806:	e7f9      	b.n	80037fc <memset+0x4>

08003808 <__errno>:
 8003808:	4b01      	ldr	r3, [pc, #4]	; (8003810 <__errno+0x8>)
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	200000b4 	.word	0x200000b4

08003814 <__libc_init_array>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	4d0d      	ldr	r5, [pc, #52]	; (800384c <__libc_init_array+0x38>)
 8003818:	4c0d      	ldr	r4, [pc, #52]	; (8003850 <__libc_init_array+0x3c>)
 800381a:	1b64      	subs	r4, r4, r5
 800381c:	10a4      	asrs	r4, r4, #2
 800381e:	2600      	movs	r6, #0
 8003820:	42a6      	cmp	r6, r4
 8003822:	d109      	bne.n	8003838 <__libc_init_array+0x24>
 8003824:	4d0b      	ldr	r5, [pc, #44]	; (8003854 <__libc_init_array+0x40>)
 8003826:	4c0c      	ldr	r4, [pc, #48]	; (8003858 <__libc_init_array+0x44>)
 8003828:	f000 fa1c 	bl	8003c64 <_init>
 800382c:	1b64      	subs	r4, r4, r5
 800382e:	10a4      	asrs	r4, r4, #2
 8003830:	2600      	movs	r6, #0
 8003832:	42a6      	cmp	r6, r4
 8003834:	d105      	bne.n	8003842 <__libc_init_array+0x2e>
 8003836:	bd70      	pop	{r4, r5, r6, pc}
 8003838:	f855 3b04 	ldr.w	r3, [r5], #4
 800383c:	4798      	blx	r3
 800383e:	3601      	adds	r6, #1
 8003840:	e7ee      	b.n	8003820 <__libc_init_array+0xc>
 8003842:	f855 3b04 	ldr.w	r3, [r5], #4
 8003846:	4798      	blx	r3
 8003848:	3601      	adds	r6, #1
 800384a:	e7f2      	b.n	8003832 <__libc_init_array+0x1e>
 800384c:	08003cc8 	.word	0x08003cc8
 8003850:	08003cc8 	.word	0x08003cc8
 8003854:	08003cc8 	.word	0x08003cc8
 8003858:	08003ccc 	.word	0x08003ccc
 800385c:	00000000 	.word	0x00000000

08003860 <log>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	ed2d 8b02 	vpush	{d8}
 8003866:	ec55 4b10 	vmov	r4, r5, d0
 800386a:	f000 f841 	bl	80038f0 <__ieee754_log>
 800386e:	4622      	mov	r2, r4
 8003870:	462b      	mov	r3, r5
 8003872:	4620      	mov	r0, r4
 8003874:	4629      	mov	r1, r5
 8003876:	eeb0 8a40 	vmov.f32	s16, s0
 800387a:	eef0 8a60 	vmov.f32	s17, s1
 800387e:	f7fd f921 	bl	8000ac4 <__aeabi_dcmpun>
 8003882:	b998      	cbnz	r0, 80038ac <log+0x4c>
 8003884:	2200      	movs	r2, #0
 8003886:	2300      	movs	r3, #0
 8003888:	4620      	mov	r0, r4
 800388a:	4629      	mov	r1, r5
 800388c:	f7fd f910 	bl	8000ab0 <__aeabi_dcmpgt>
 8003890:	b960      	cbnz	r0, 80038ac <log+0x4c>
 8003892:	2200      	movs	r2, #0
 8003894:	2300      	movs	r3, #0
 8003896:	4620      	mov	r0, r4
 8003898:	4629      	mov	r1, r5
 800389a:	f7fd f8e1 	bl	8000a60 <__aeabi_dcmpeq>
 800389e:	b160      	cbz	r0, 80038ba <log+0x5a>
 80038a0:	f7ff ffb2 	bl	8003808 <__errno>
 80038a4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80038d0 <log+0x70>
 80038a8:	2322      	movs	r3, #34	; 0x22
 80038aa:	6003      	str	r3, [r0, #0]
 80038ac:	eeb0 0a48 	vmov.f32	s0, s16
 80038b0:	eef0 0a68 	vmov.f32	s1, s17
 80038b4:	ecbd 8b02 	vpop	{d8}
 80038b8:	bd38      	pop	{r3, r4, r5, pc}
 80038ba:	f7ff ffa5 	bl	8003808 <__errno>
 80038be:	ecbd 8b02 	vpop	{d8}
 80038c2:	2321      	movs	r3, #33	; 0x21
 80038c4:	6003      	str	r3, [r0, #0]
 80038c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038ca:	4803      	ldr	r0, [pc, #12]	; (80038d8 <log+0x78>)
 80038cc:	f000 b808 	b.w	80038e0 <nan>
 80038d0:	00000000 	.word	0x00000000
 80038d4:	fff00000 	.word	0xfff00000
 80038d8:	08003cbc 	.word	0x08003cbc
 80038dc:	00000000 	.word	0x00000000

080038e0 <nan>:
 80038e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80038e8 <nan+0x8>
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	00000000 	.word	0x00000000
 80038ec:	7ff80000 	.word	0x7ff80000

080038f0 <__ieee754_log>:
 80038f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f4:	ec51 0b10 	vmov	r0, r1, d0
 80038f8:	ed2d 8b04 	vpush	{d8-d9}
 80038fc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003900:	b083      	sub	sp, #12
 8003902:	460d      	mov	r5, r1
 8003904:	da29      	bge.n	800395a <__ieee754_log+0x6a>
 8003906:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800390a:	4303      	orrs	r3, r0
 800390c:	ee10 2a10 	vmov	r2, s0
 8003910:	d10c      	bne.n	800392c <__ieee754_log+0x3c>
 8003912:	49cf      	ldr	r1, [pc, #828]	; (8003c50 <__ieee754_log+0x360>)
 8003914:	2200      	movs	r2, #0
 8003916:	2300      	movs	r3, #0
 8003918:	2000      	movs	r0, #0
 800391a:	f7fc ff63 	bl	80007e4 <__aeabi_ddiv>
 800391e:	ec41 0b10 	vmov	d0, r0, r1
 8003922:	b003      	add	sp, #12
 8003924:	ecbd 8b04 	vpop	{d8-d9}
 8003928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800392c:	2900      	cmp	r1, #0
 800392e:	da05      	bge.n	800393c <__ieee754_log+0x4c>
 8003930:	460b      	mov	r3, r1
 8003932:	f7fc fc75 	bl	8000220 <__aeabi_dsub>
 8003936:	2200      	movs	r2, #0
 8003938:	2300      	movs	r3, #0
 800393a:	e7ee      	b.n	800391a <__ieee754_log+0x2a>
 800393c:	4bc5      	ldr	r3, [pc, #788]	; (8003c54 <__ieee754_log+0x364>)
 800393e:	2200      	movs	r2, #0
 8003940:	f7fc fe26 	bl	8000590 <__aeabi_dmul>
 8003944:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8003948:	460d      	mov	r5, r1
 800394a:	4ac3      	ldr	r2, [pc, #780]	; (8003c58 <__ieee754_log+0x368>)
 800394c:	4295      	cmp	r5, r2
 800394e:	dd06      	ble.n	800395e <__ieee754_log+0x6e>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	f7fc fc66 	bl	8000224 <__adddf3>
 8003958:	e7e1      	b.n	800391e <__ieee754_log+0x2e>
 800395a:	2300      	movs	r3, #0
 800395c:	e7f5      	b.n	800394a <__ieee754_log+0x5a>
 800395e:	152c      	asrs	r4, r5, #20
 8003960:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003964:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8003968:	441c      	add	r4, r3
 800396a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800396e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8003972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003976:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800397a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800397e:	ea42 0105 	orr.w	r1, r2, r5
 8003982:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8003986:	2200      	movs	r2, #0
 8003988:	4bb4      	ldr	r3, [pc, #720]	; (8003c5c <__ieee754_log+0x36c>)
 800398a:	f7fc fc49 	bl	8000220 <__aeabi_dsub>
 800398e:	1cab      	adds	r3, r5, #2
 8003990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003994:	2b02      	cmp	r3, #2
 8003996:	4682      	mov	sl, r0
 8003998:	468b      	mov	fp, r1
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	dc53      	bgt.n	8003a48 <__ieee754_log+0x158>
 80039a0:	2300      	movs	r3, #0
 80039a2:	f7fd f85d 	bl	8000a60 <__aeabi_dcmpeq>
 80039a6:	b1d0      	cbz	r0, 80039de <__ieee754_log+0xee>
 80039a8:	2c00      	cmp	r4, #0
 80039aa:	f000 8122 	beq.w	8003bf2 <__ieee754_log+0x302>
 80039ae:	4620      	mov	r0, r4
 80039b0:	f7fc fd84 	bl	80004bc <__aeabi_i2d>
 80039b4:	a390      	add	r3, pc, #576	; (adr r3, 8003bf8 <__ieee754_log+0x308>)
 80039b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ba:	4606      	mov	r6, r0
 80039bc:	460f      	mov	r7, r1
 80039be:	f7fc fde7 	bl	8000590 <__aeabi_dmul>
 80039c2:	a38f      	add	r3, pc, #572	; (adr r3, 8003c00 <__ieee754_log+0x310>)
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	4604      	mov	r4, r0
 80039ca:	460d      	mov	r5, r1
 80039cc:	4630      	mov	r0, r6
 80039ce:	4639      	mov	r1, r7
 80039d0:	f7fc fdde 	bl	8000590 <__aeabi_dmul>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4620      	mov	r0, r4
 80039da:	4629      	mov	r1, r5
 80039dc:	e7ba      	b.n	8003954 <__ieee754_log+0x64>
 80039de:	a38a      	add	r3, pc, #552	; (adr r3, 8003c08 <__ieee754_log+0x318>)
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	4650      	mov	r0, sl
 80039e6:	4659      	mov	r1, fp
 80039e8:	f7fc fdd2 	bl	8000590 <__aeabi_dmul>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	2000      	movs	r0, #0
 80039f2:	499b      	ldr	r1, [pc, #620]	; (8003c60 <__ieee754_log+0x370>)
 80039f4:	f7fc fc14 	bl	8000220 <__aeabi_dsub>
 80039f8:	4652      	mov	r2, sl
 80039fa:	4606      	mov	r6, r0
 80039fc:	460f      	mov	r7, r1
 80039fe:	465b      	mov	r3, fp
 8003a00:	4650      	mov	r0, sl
 8003a02:	4659      	mov	r1, fp
 8003a04:	f7fc fdc4 	bl	8000590 <__aeabi_dmul>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4630      	mov	r0, r6
 8003a0e:	4639      	mov	r1, r7
 8003a10:	f7fc fdbe 	bl	8000590 <__aeabi_dmul>
 8003a14:	4606      	mov	r6, r0
 8003a16:	460f      	mov	r7, r1
 8003a18:	b914      	cbnz	r4, 8003a20 <__ieee754_log+0x130>
 8003a1a:	4632      	mov	r2, r6
 8003a1c:	463b      	mov	r3, r7
 8003a1e:	e0a2      	b.n	8003b66 <__ieee754_log+0x276>
 8003a20:	4620      	mov	r0, r4
 8003a22:	f7fc fd4b 	bl	80004bc <__aeabi_i2d>
 8003a26:	a374      	add	r3, pc, #464	; (adr r3, 8003bf8 <__ieee754_log+0x308>)
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	4680      	mov	r8, r0
 8003a2e:	4689      	mov	r9, r1
 8003a30:	f7fc fdae 	bl	8000590 <__aeabi_dmul>
 8003a34:	a372      	add	r3, pc, #456	; (adr r3, 8003c00 <__ieee754_log+0x310>)
 8003a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	460d      	mov	r5, r1
 8003a3e:	4640      	mov	r0, r8
 8003a40:	4649      	mov	r1, r9
 8003a42:	f7fc fda5 	bl	8000590 <__aeabi_dmul>
 8003a46:	e0a7      	b.n	8003b98 <__ieee754_log+0x2a8>
 8003a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a4c:	f7fc fbea 	bl	8000224 <__adddf3>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4650      	mov	r0, sl
 8003a56:	4659      	mov	r1, fp
 8003a58:	f7fc fec4 	bl	80007e4 <__aeabi_ddiv>
 8003a5c:	ec41 0b18 	vmov	d8, r0, r1
 8003a60:	4620      	mov	r0, r4
 8003a62:	f7fc fd2b 	bl	80004bc <__aeabi_i2d>
 8003a66:	ec53 2b18 	vmov	r2, r3, d8
 8003a6a:	ec41 0b19 	vmov	d9, r0, r1
 8003a6e:	ec51 0b18 	vmov	r0, r1, d8
 8003a72:	f7fc fd8d 	bl	8000590 <__aeabi_dmul>
 8003a76:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8003a7a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4680      	mov	r8, r0
 8003a86:	4689      	mov	r9, r1
 8003a88:	f7fc fd82 	bl	8000590 <__aeabi_dmul>
 8003a8c:	a360      	add	r3, pc, #384	; (adr r3, 8003c10 <__ieee754_log+0x320>)
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	4606      	mov	r6, r0
 8003a94:	460f      	mov	r7, r1
 8003a96:	f7fc fd7b 	bl	8000590 <__aeabi_dmul>
 8003a9a:	a35f      	add	r3, pc, #380	; (adr r3, 8003c18 <__ieee754_log+0x328>)
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f7fc fbc0 	bl	8000224 <__adddf3>
 8003aa4:	4632      	mov	r2, r6
 8003aa6:	463b      	mov	r3, r7
 8003aa8:	f7fc fd72 	bl	8000590 <__aeabi_dmul>
 8003aac:	a35c      	add	r3, pc, #368	; (adr r3, 8003c20 <__ieee754_log+0x330>)
 8003aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab2:	f7fc fbb7 	bl	8000224 <__adddf3>
 8003ab6:	4632      	mov	r2, r6
 8003ab8:	463b      	mov	r3, r7
 8003aba:	f7fc fd69 	bl	8000590 <__aeabi_dmul>
 8003abe:	a35a      	add	r3, pc, #360	; (adr r3, 8003c28 <__ieee754_log+0x338>)
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f7fc fbae 	bl	8000224 <__adddf3>
 8003ac8:	4642      	mov	r2, r8
 8003aca:	464b      	mov	r3, r9
 8003acc:	f7fc fd60 	bl	8000590 <__aeabi_dmul>
 8003ad0:	a357      	add	r3, pc, #348	; (adr r3, 8003c30 <__ieee754_log+0x340>)
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	4680      	mov	r8, r0
 8003ad8:	4689      	mov	r9, r1
 8003ada:	4630      	mov	r0, r6
 8003adc:	4639      	mov	r1, r7
 8003ade:	f7fc fd57 	bl	8000590 <__aeabi_dmul>
 8003ae2:	a355      	add	r3, pc, #340	; (adr r3, 8003c38 <__ieee754_log+0x348>)
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f7fc fb9c 	bl	8000224 <__adddf3>
 8003aec:	4632      	mov	r2, r6
 8003aee:	463b      	mov	r3, r7
 8003af0:	f7fc fd4e 	bl	8000590 <__aeabi_dmul>
 8003af4:	a352      	add	r3, pc, #328	; (adr r3, 8003c40 <__ieee754_log+0x350>)
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	f7fc fb93 	bl	8000224 <__adddf3>
 8003afe:	4632      	mov	r2, r6
 8003b00:	463b      	mov	r3, r7
 8003b02:	f7fc fd45 	bl	8000590 <__aeabi_dmul>
 8003b06:	460b      	mov	r3, r1
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	4640      	mov	r0, r8
 8003b0e:	f7fc fb89 	bl	8000224 <__adddf3>
 8003b12:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8003b16:	9b01      	ldr	r3, [sp, #4]
 8003b18:	3551      	adds	r5, #81	; 0x51
 8003b1a:	431d      	orrs	r5, r3
 8003b1c:	2d00      	cmp	r5, #0
 8003b1e:	4680      	mov	r8, r0
 8003b20:	4689      	mov	r9, r1
 8003b22:	dd48      	ble.n	8003bb6 <__ieee754_log+0x2c6>
 8003b24:	4b4e      	ldr	r3, [pc, #312]	; (8003c60 <__ieee754_log+0x370>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	4650      	mov	r0, sl
 8003b2a:	4659      	mov	r1, fp
 8003b2c:	f7fc fd30 	bl	8000590 <__aeabi_dmul>
 8003b30:	4652      	mov	r2, sl
 8003b32:	465b      	mov	r3, fp
 8003b34:	f7fc fd2c 	bl	8000590 <__aeabi_dmul>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4606      	mov	r6, r0
 8003b3e:	460f      	mov	r7, r1
 8003b40:	4640      	mov	r0, r8
 8003b42:	4649      	mov	r1, r9
 8003b44:	f7fc fb6e 	bl	8000224 <__adddf3>
 8003b48:	ec53 2b18 	vmov	r2, r3, d8
 8003b4c:	f7fc fd20 	bl	8000590 <__aeabi_dmul>
 8003b50:	4680      	mov	r8, r0
 8003b52:	4689      	mov	r9, r1
 8003b54:	b964      	cbnz	r4, 8003b70 <__ieee754_log+0x280>
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	4639      	mov	r1, r7
 8003b5e:	f7fc fb5f 	bl	8000220 <__aeabi_dsub>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4650      	mov	r0, sl
 8003b68:	4659      	mov	r1, fp
 8003b6a:	f7fc fb59 	bl	8000220 <__aeabi_dsub>
 8003b6e:	e6d6      	b.n	800391e <__ieee754_log+0x2e>
 8003b70:	a321      	add	r3, pc, #132	; (adr r3, 8003bf8 <__ieee754_log+0x308>)
 8003b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b76:	ec51 0b19 	vmov	r0, r1, d9
 8003b7a:	f7fc fd09 	bl	8000590 <__aeabi_dmul>
 8003b7e:	a320      	add	r3, pc, #128	; (adr r3, 8003c00 <__ieee754_log+0x310>)
 8003b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b84:	4604      	mov	r4, r0
 8003b86:	460d      	mov	r5, r1
 8003b88:	ec51 0b19 	vmov	r0, r1, d9
 8003b8c:	f7fc fd00 	bl	8000590 <__aeabi_dmul>
 8003b90:	4642      	mov	r2, r8
 8003b92:	464b      	mov	r3, r9
 8003b94:	f7fc fb46 	bl	8000224 <__adddf3>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	4639      	mov	r1, r7
 8003ba0:	f7fc fb3e 	bl	8000220 <__aeabi_dsub>
 8003ba4:	4652      	mov	r2, sl
 8003ba6:	465b      	mov	r3, fp
 8003ba8:	f7fc fb3a 	bl	8000220 <__aeabi_dsub>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	e7d9      	b.n	8003b6a <__ieee754_log+0x27a>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4650      	mov	r0, sl
 8003bbc:	4659      	mov	r1, fp
 8003bbe:	f7fc fb2f 	bl	8000220 <__aeabi_dsub>
 8003bc2:	ec53 2b18 	vmov	r2, r3, d8
 8003bc6:	f7fc fce3 	bl	8000590 <__aeabi_dmul>
 8003bca:	4606      	mov	r6, r0
 8003bcc:	460f      	mov	r7, r1
 8003bce:	2c00      	cmp	r4, #0
 8003bd0:	f43f af23 	beq.w	8003a1a <__ieee754_log+0x12a>
 8003bd4:	a308      	add	r3, pc, #32	; (adr r3, 8003bf8 <__ieee754_log+0x308>)
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	ec51 0b19 	vmov	r0, r1, d9
 8003bde:	f7fc fcd7 	bl	8000590 <__aeabi_dmul>
 8003be2:	a307      	add	r3, pc, #28	; (adr r3, 8003c00 <__ieee754_log+0x310>)
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	4604      	mov	r4, r0
 8003bea:	460d      	mov	r5, r1
 8003bec:	ec51 0b19 	vmov	r0, r1, d9
 8003bf0:	e727      	b.n	8003a42 <__ieee754_log+0x152>
 8003bf2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8003c48 <__ieee754_log+0x358>
 8003bf6:	e694      	b.n	8003922 <__ieee754_log+0x32>
 8003bf8:	fee00000 	.word	0xfee00000
 8003bfc:	3fe62e42 	.word	0x3fe62e42
 8003c00:	35793c76 	.word	0x35793c76
 8003c04:	3dea39ef 	.word	0x3dea39ef
 8003c08:	55555555 	.word	0x55555555
 8003c0c:	3fd55555 	.word	0x3fd55555
 8003c10:	df3e5244 	.word	0xdf3e5244
 8003c14:	3fc2f112 	.word	0x3fc2f112
 8003c18:	96cb03de 	.word	0x96cb03de
 8003c1c:	3fc74664 	.word	0x3fc74664
 8003c20:	94229359 	.word	0x94229359
 8003c24:	3fd24924 	.word	0x3fd24924
 8003c28:	55555593 	.word	0x55555593
 8003c2c:	3fe55555 	.word	0x3fe55555
 8003c30:	d078c69f 	.word	0xd078c69f
 8003c34:	3fc39a09 	.word	0x3fc39a09
 8003c38:	1d8e78af 	.word	0x1d8e78af
 8003c3c:	3fcc71c5 	.word	0x3fcc71c5
 8003c40:	9997fa04 	.word	0x9997fa04
 8003c44:	3fd99999 	.word	0x3fd99999
	...
 8003c50:	c3500000 	.word	0xc3500000
 8003c54:	43500000 	.word	0x43500000
 8003c58:	7fefffff 	.word	0x7fefffff
 8003c5c:	3ff00000 	.word	0x3ff00000
 8003c60:	3fe00000 	.word	0x3fe00000

08003c64 <_init>:
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c66:	bf00      	nop
 8003c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6a:	bc08      	pop	{r3}
 8003c6c:	469e      	mov	lr, r3
 8003c6e:	4770      	bx	lr

08003c70 <_fini>:
 8003c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c72:	bf00      	nop
 8003c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c76:	bc08      	pop	{r3}
 8003c78:	469e      	mov	lr, r3
 8003c7a:	4770      	bx	lr
